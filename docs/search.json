[{"path":"/articles/age-sex-pyramid.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Age-sex pyramids","text":"Age-sex pyramids fundamental tools epidemiological analysis, providing visual representation demographic distribution cases. help identify vulnerable populations, understand transmission patterns, guide public health interventions. age_sex_pyramid() function supports line-list data (individual cases) pre-aggregated counts analysts can tailor output workflows.","code":""},{"path":"/articles/age-sex-pyramid.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Age-sex pyramids","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/age-sex-pyramid.html","id":"example-1-static-pyramid-from-line-list-data","dir":"Articles","previous_headings":"","what":"Example 1: Static pyramid from line-list data","title":"Age-sex pyramids","text":"Static pyramids ideal publications reports clear, printable summary population structure required. example subset epiviz::lab_data Staphylococcus aureus detections recorded 2023 let age_sex_pyramid() calculate age bands automatically line-list data.","code":""},{"path":"/articles/age-sex-pyramid.html","id":"prepare-the-line-list-data","dir":"Articles","previous_headings":"Example 1: Static pyramid from line-list data","what":"Prepare the line-list data","title":"Age-sex pyramids","text":"","code":"line_list_pyramid_data <- epiviz::lab_data %>%   filter(     organism_species_name == \"STAPHYLOCOCCUS AUREUS\",     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-12-31\"),     !is.na(date_of_birth),     !is.na(sex)   ) %>%   mutate(     sex_clean = case_when(       toupper(sex) %in% c(\"M\", \"MALE\") ~ \"Male\",       toupper(sex) %in% c(\"F\", \"FEMALE\") ~ \"Female\",       TRUE ~ NA_character_     )   ) %>%   filter(!is.na(sex_clean))"},{"path":"/articles/age-sex-pyramid.html","id":"plot-the-static-pyramid","dir":"Articles","previous_headings":"Example 1: Static pyramid from line-list data","what":"Plot the static pyramid","title":"Age-sex pyramids","text":"Age-sex pyramid Staphylococcus aureus detections January December 2023. Interpretation: plot highlights age groups contributing laboratory detections, mirrored bars showing relative burden among males females.","code":"age_sex_pyramid(   dynamic = FALSE,   params = list(     df = line_list_pyramid_data,     var_map = list(       dob_var = \"date_of_birth\",       sex_var = \"sex_clean\"     ),     grouped = FALSE,     mf_colours = c(\"#440154\", \"#2196F3\"),     x_breaks = 6,     x_axis_title = \"Number of detections\",     y_axis_title = \"Age group (years)\",     chart_title = \"Static age-sex pyramid\",     age_calc_refdate = as.Date(\"2023-12-31\")   ) )"},{"path":"/articles/age-sex-pyramid.html","id":"example-2-interactive-grouped-pyramid-with-confidence-intervals","dir":"Articles","previous_headings":"","what":"Example 2: Interactive grouped pyramid with confidence intervals","title":"Age-sex pyramids","text":"Interactive pyramids useful exploratory dashboards end users can interrogate data directly. aggregating records age bands providing associated Poisson confidence intervals, plot reveals central estimates uncertainty.","code":""},{"path":"/articles/age-sex-pyramid.html","id":"aggregate-counts-and-calculate-confidence-intervals","dir":"Articles","previous_headings":"Example 2: Interactive grouped pyramid with confidence intervals","what":"Aggregate counts and calculate confidence intervals","title":"Age-sex pyramids","text":"","code":"grouped_pyramid_data <- line_list_pyramid_data %>%   mutate(     age_years = floor(time_length(interval(date_of_birth, as.Date(\"2023-12-31\")), \"years\")),     age_band = cut(       age_years,       breaks = c(0, 5, 15, 25, 35, 45, 55, 65, 75, 85, Inf),       right = FALSE,       labels = c(\"0-4\", \"5-14\", \"15-24\", \"25-34\", \"35-44\",                  \"45-54\", \"55-64\", \"65-74\", \"75-84\", \"85+\")     )   ) %>%   filter(!is.na(age_band)) %>%   count(age_band, sex_clean, name = \"val\") %>%   rename(sex_mf = sex_clean) %>%   mutate(     lower_ci = if_else(val == 0, 0, qchisq(0.025, 2 * val) / 2),     upper_ci = qchisq(0.975, 2 * (val + 1)) / 2   )"},{"path":"/articles/age-sex-pyramid.html","id":"plot-the-interactive-grouped-pyramid","dir":"Articles","previous_headings":"Example 2: Interactive grouped pyramid with confidence intervals","what":"Plot the interactive grouped pyramid","title":"Age-sex pyramids","text":"Interactive age-sex pyramid 95% confidence intervals Staphylococcus aureus detections 2023. Interpretation: interactive plot provides hover labels precise counts asymmetric confidence intervals, enabling rapid assessment uncertainty age-sex combination.","code":"age_sex_pyramid(   dynamic = TRUE,   params = list(     df = grouped_pyramid_data,     var_map = list(       age_group_var = \"age_band\",       sex_var = \"sex_mf\",       value_var = \"val\",       ci_lower = \"lower_ci\",       ci_upper = \"upper_ci\"     ),     grouped = TRUE,     ci = \"errorbar\",     mf_colours = c(\"pink\", \"blue\"),     x_breaks = 5,     chart_title = \"Interactive grouped pyramid with CI\",     x_axis_title = \"Number of detections\",     y_axis_title = \"Age group (years)\",     legend_title = \"Sex\"   ) )"},{"path":"/articles/age-sex-pyramid.html","id":"tips-for-age-sex-pyramids","dir":"Articles","previous_headings":"","what":"Tips for age-sex pyramids","title":"Age-sex pyramids","text":"Data preparation: line-list data (grouped = FALSE), ensure date--birth sex variables present clean; function can derive age groups dates directly. Variable mapping: Use var_map align column names expected inputs. Grouped data requires age_group_var, sex_var, value_var, ci_lower, ci_upper. Confidence intervals: Set ci = \"errorbar\" grouped data supplying interval bounds, allow function calculate Poisson intervals working line lists. Colour choices: Provide mf_colours match organisational palettes accessibility requirements (e.g., colour-blind friendly combinations). Reference dates: Control age calculation age_calc_refdate ensure comparisons aligned consistent snapshot time, especially retrospective analyses.","code":""},{"path":"/articles/col-chart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Column charts","text":"Column charts essential tools epidemiological surveillance comparing counts across categories regions, time periods, organism types. col_chart() function provides flexible options creating static interactive column charts support grouping, stacking, labeling, advanced features like case boxes threshold lines.","code":""},{"path":"/articles/col-chart.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Column charts","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/col-chart.html","id":"example-1-basic-single-series-column-chart","dir":"Articles","previous_headings":"","what":"Example 1: Basic single-series column chart","title":"Column charts","text":"Simple column charts ideal comparing counts across categories. example shows regional distribution laboratory detections.","code":""},{"path":"/articles/col-chart.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Example 1: Basic single-series column chart","what":"Prepare the data","title":"Column charts","text":"","code":"# Aggregate detections by region for a specific time period (as used in tests) regional_summary <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-12-31\")   ) %>%   group_by(region) %>%   summarise(detections = n()) %>%   ungroup()"},{"path":"/articles/col-chart.html","id":"create-the-basic-column-chart","dir":"Articles","previous_headings":"Example 1: Basic single-series column chart","what":"Create the basic column chart","title":"Column charts","text":"Interpretation: chart clearly shows regional distribution laboratory detections 2023, London highest number detections regions following descending order.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = regional_summary,     x = \"region\",           # Categorical variable for x-axis     y = \"detections\",       # Numeric variable for y-axis     fill_colours = \"#007C91\",  # Single color for all bars     chart_title = \"Laboratory Detections by Region 2023\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45  # Rotate labels for readability   ) )"},{"path":"/articles/col-chart.html","id":"example-2-grouped-stacked-column-chart","dir":"Articles","previous_headings":"","what":"Example 2: Grouped stacked column chart","title":"Column charts","text":"need compare multiple categories within group, stacked column charts effective. example shows detections organism type within region.","code":""},{"path":"/articles/col-chart.html","id":"prepare-the-data-1","dir":"Articles","previous_headings":"Example 2: Grouped stacked column chart","what":"Prepare the data","title":"Column charts","text":"","code":"# Aggregate by region and organism species (as used in tests) region_organism_summary <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-12-31\")   ) %>%   group_by(region, organism_species_name) %>%   summarise(detections = n()) %>%   ungroup()"},{"path":"/articles/col-chart.html","id":"create-the-grouped-stacked-chart","dir":"Articles","previous_headings":"Example 2: Grouped stacked column chart","what":"Create the grouped stacked chart","title":"Column charts","text":"Interpretation: stacked chart reveals regional differences total detections relative contribution different organism types within region.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = region_organism_summary,     x = \"region\",                    # Primary grouping variable     y = \"detections\",                # Value variable     group_var = \"organism_species_name\",  # Secondary grouping variable     group_var_barmode = \"stack\",     # Stack bars within each group     fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                      \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                      \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),  # Named color mapping     chart_title = \"Laboratory Detections by Region \\nand Species 2023\",     chart_footer = \"This chart has been created using simulated data.\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     legend_title = \"Organism species\",     x_axis_label_angle = -45   ) )"},{"path":"/articles/col-chart.html","id":"example-3-column-chart-with-bar-labels","dir":"Articles","previous_headings":"","what":"Example 3: Column chart with bar labels","title":"Column charts","text":"Bar labels show exact values bar, making easier read precise counts without estimating axis.","code":""},{"path":"/articles/col-chart.html","id":"create-the-chart-with-bar-labels","dir":"Articles","previous_headings":"Example 3: Column chart with bar labels","what":"Create the chart with bar labels","title":"Column charts","text":"Interpretation: bar labels make easy see exact detection counts region without estimate y-axis scale.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = regional_summary,     x = \"region\",     y = \"detections\",     fill_colours = \"#007C91\",     chart_title = \"Laboratory Detections by Region 2023\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45,     bar_labels = \"detections\",      # Show values on bars     bar_labels_pos = \"bar_base\"     # Position labels at base of bars   ) )"},{"path":"/articles/col-chart.html","id":"example-4-interactive-column-chart-with-case-boxes","dir":"Articles","previous_headings":"","what":"Example 4: Interactive column chart with case boxes","title":"Column charts","text":"Case boxes useful highlighting specific data points adding additional context visualization.","code":""},{"path":"/articles/col-chart.html","id":"prepare-data-for-case-boxes","dir":"Articles","previous_headings":"Example 4: Interactive column chart with case boxes","what":"Prepare data for case boxes","title":"Column charts","text":"","code":"# Use a shorter time period for case boxes demonstration case_box_data <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-01-07\")  # One week for case boxes   ) %>%   group_by(region, organism_species_name) %>%   summarise(detections = n()) %>%   ungroup()"},{"path":"/articles/col-chart.html","id":"create-the-interactive-chart-with-case-boxes","dir":"Articles","previous_headings":"Example 4: Interactive column chart with case boxes","what":"Create the interactive chart with case boxes","title":"Column charts","text":"Interpretation: interactive chart case boxes allows users explore data dynamically highlighting specific data points interest.","code":"col_chart(   dynamic = TRUE,   # Create interactive plotly chart   params = list(     df = case_box_data,     x = \"region\",     y = \"detections\",     group_var = \"organism_species_name\",     group_var_barmode = \"stack\",     fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                      \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                      \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),     case_boxes = TRUE,              # Enable case boxes     chart_title = \"Laboratory Detections by Region \\nand Species (Week 1, 2023)\",     chart_footer = \"This chart has been created using simulated data.\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     legend_title = \"Organism species\",     x_axis_label_angle = -45   ) )"},{"path":"/articles/col-chart.html","id":"example-5-column-chart-with-threshold-lines","dir":"Articles","previous_headings":"","what":"Example 5: Column chart with threshold lines","title":"Column charts","text":"Threshold lines help identify data points exceed fall important cutoffs, outbreak levels target values.","code":""},{"path":"/articles/col-chart.html","id":"create-the-chart-with-threshold-lines","dir":"Articles","previous_headings":"Example 5: Column chart with threshold lines","what":"Create the chart with threshold lines","title":"Column charts","text":"Interpretation: threshold lines help identify regions exceed alert levels (orange dashed line) outbreak thresholds (red solid line), guiding public health response priorities.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = region_organism_summary,     x = \"region\",     y = \"detections\",     group_var = \"organism_species_name\",     group_var_barmode = \"stack\",     fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                      \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                      \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),     # Threshold lines     hline = c(1000, 2000),          # Multiple threshold lines     hline_colour = c(\"orange\", \"red\"),  # Colors for each line     hline_label = c(\"Alert level\", \"Outbreak threshold\"),  # Labels for lines     hline_label_colour = c(\"orange\", \"red\"),  # Label colors     hline_type = c(\"dashed\", \"solid\"),  # Line types     hline_width = c(1, 2),          # Line widths     chart_title = \"Laboratory Detections by Region \\nand Species 2023\",     chart_footer = \"This chart has been created using simulated data.\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     legend_title = \"Organism species\",     x_axis_label_angle = -45   ) )"},{"path":"/articles/col-chart.html","id":"example-6-time-series-column-chart","dir":"Articles","previous_headings":"","what":"Example 6: Time-series column chart","title":"Column charts","text":"Time-series column charts crucial surveillance, showing temporal patterns disease occurrence. example demonstrates weekly aggregation.","code":""},{"path":"/articles/col-chart.html","id":"prepare-the-time-series-data","dir":"Articles","previous_headings":"Example 6: Time-series column chart","what":"Prepare the time-series data","title":"Column charts","text":"","code":"# Create weekly time series data weekly_series <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-03-31\")   ) %>%   mutate(     specimen_week = floor_date(specimen_date, \"week\", week_start = 1)  # Monday start   ) %>%   count(specimen_week, name = \"detections\")"},{"path":"/articles/col-chart.html","id":"create-the-time-series-column-chart","dir":"Articles","previous_headings":"Example 6: Time-series column chart","what":"Create the time-series column chart","title":"Column charts","text":"Weekly laboratory detections January March 2023. Interpretation: time-series chart reveals weekly patterns laboratory detections, helping identify trends, seasonal effects, potential outbreaks.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = weekly_series,     x = \"specimen_week\",        # Date variable for x-axis     y = \"detections\",           # Count variable     x_time_series = TRUE,       # Indicate this is time series data     time_period = \"iso_year_week\",  # Aggregation period     fill_colours = \"#007C91\",     chart_title = \"Weekly laboratory detections (Q1 2023)\",     x_axis_title = \"Week\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45,     # Custom styling for time series     x_axis_date_breaks = \"2 weeks\",  # Show every 2 weeks     x_axis_date_labels = \"%b %d\"     # Format: Jan 01   ) )"},{"path":"/articles/col-chart.html","id":"tips-for-column-charts","dir":"Articles","previous_headings":"","what":"Tips for column charts","title":"Column charts","text":"Data aggregation: Always aggregate data appropriately passing col_chart(). function expects pre-calculated counts values. Color mapping: Use named color vectors grouped data ensure consistent colors across charts: Grouping options: group_var_barmode = \"stack\" stacked bars (shows composition) group_var_barmode = \"group\" grouped bars (shows comparison) Bar labels: Use bar_labels bar_labels_pos show exact values bars: \"bar_base\" - base bars \"bar_centre\" - center bars \"bar_top\" - top bars Case boxes: Enable case_boxes = TRUE interactive charts highlight specific data points. Threshold lines: Use hline parameters add horizontal reference lines alert levels targets. Time series: working dates, set x_time_series = TRUE specify appropriate time_period proper aggregation. Interactive features: Set dynamic = TRUE interactive charts zooming, hovering, filtering capabilities. Chart footers: Add chart_footer provide context data sources limitations. Label rotation: Use x_axis_label_angle = -45 long category labels improve readability.","code":"fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                  \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\")"},{"path":"/articles/epi-curve.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Epi curves","text":"Epi curves fundamental tools epidemiological surveillance outbreak investigation. display distribution cases time, helping identify source, transmission patterns, progression disease outbreaks. epi_curve() function supports various time periods, grouping options, rolling averages, cumulative lines, static interactive visualizations.","code":""},{"path":"/articles/epi-curve.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Epi curves","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/epi-curve.html","id":"example-1-basic-epi-curve-with-rolling-average","dir":"Articles","previous_headings":"","what":"Example 1: Basic epi curve with rolling average","title":"Epi curves","text":"Basic epi curves rolling averages help smooth daily fluctuations identify underlying trends surveillance data.","code":""},{"path":"/articles/epi-curve.html","id":"create-the-basic-epi-curve","dir":"Articles","previous_headings":"Example 1: Basic epi curve with rolling average","what":"Create the basic epi curve","title":"Epi curves","text":"Monthly epi curve three-month rolling average. Interpretation: epi curve shows monthly detections 3-month rolling average line smooths month--month variations reveal underlying trends.","code":"epi_curve(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = epiviz::lab_data,     date_var = \"specimen_date\",     # Date variable in the dataset     date_start = \"2020-01-01\",      # Start date for the curve     date_end = \"2023-12-31\",        # End date for the curve     time_period = \"year_month\",     # Monthly aggregation     fill_colours = \"#007C91\",       # Color for bars     # Rolling average parameters     rolling_average_line = TRUE,                    # Include rolling average line     rolling_average_line_lookback = 3,             # 3-month rolling average     rolling_average_line_legend_label = \"3-month rolling average\",  # Legend label     chart_title = \"Laboratory Detections per Month\",     x_axis_title = \"Year - Month\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90   ) )"},{"path":"/articles/epi-curve.html","id":"example-2-grouped-epi-curve-with-stacked-bars","dir":"Articles","previous_headings":"","what":"Example 2: Grouped epi curve with stacked bars","title":"Epi curves","text":"Grouped epi curves allow comparison different categories (e.g., organism types) time, showing individual patterns overall trends.","code":""},{"path":"/articles/epi-curve.html","id":"create-the-grouped-epi-curve","dir":"Articles","previous_headings":"Example 2: Grouped epi curve with stacked bars","what":"Create the grouped epi curve","title":"Epi curves","text":"Stacked weekly epi curve organism species seven-week rolling average. Interpretation: stacked epi curve shows total weekly detections relative contribution organism type, revealing patterns overall burden individual organism trends.","code":"# Define custom week breaks for better x-axis display week_seq <- seq(as.Date(\"2021-01-01\"), as.Date(\"2022-05-31\"), by = '2 week') week_breaks <- paste0(lubridate::isoyear(week_seq), '-W', lubridate::isoweek(week_seq))  epi_curve(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = epiviz::lab_data,     date_var = \"specimen_date\",     date_start = \"2021-01-01\",     date_end = \"2022-05-31\",     time_period = \"iso_year_week\",  # Weekly aggregation using ISO weeks     group_var = \"organism_species_name\",  # Group by organism type     group_var_barmode = \"stack\",    # Stack bars to show total and composition     fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                      \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                      \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),  # Named color mapping     rolling_average_line = TRUE,     rolling_average_line_legend_label = \"7-week rolling average\",     chart_title = \"Laboratory detections by species \\n 2021-01 - 2022-05\",     chart_footer = \"This chart has been created using simulated data.\",     x_axis_title = \"Year - ISO Week\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90,     x_axis_break_labels = week_breaks,  # Custom week labels     y_axis_break_labels = seq(0, 250, 20),  # Custom y-axis breaks     chart_title_colour = \"#007C91\",     chart_footer_colour = \"#007C91\"   ) )"},{"path":"/articles/epi-curve.html","id":"example-3-daily-epi-curve-with-case-boxes-and-cumulative-line","dir":"Articles","previous_headings":"","what":"Example 3: Daily epi curve with case boxes and cumulative line","title":"Epi curves","text":"Daily epi curves case boxes cumulative lines essential outbreak investigation, providing detailed temporal resolution cumulative case tracking.","code":""},{"path":"/articles/epi-curve.html","id":"create-the-detailed-daily-epi-curve","dir":"Articles","previous_headings":"Example 3: Daily epi curve with case boxes and cumulative line","what":"Create the detailed daily epi curve","title":"Epi curves","text":"Daily epi curve stacked bars, case boxes, cumulative line, threshold indicator. Interpretation: comprehensive daily epi curve includes case boxes highlighting specific data points, rolling average trend identification, cumulative line total case tracking, threshold line alert levels.","code":"epi_curve(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = epiviz::lab_data,     date_var = \"specimen_date\",     date_start = \"2021-06-01\",     date_end = \"2021-07-31\",     time_period = \"day\",            # Daily aggregation for detailed analysis     group_var = \"organism_species_name\",     group_var_barmode = \"stack\",     fill_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),     # Advanced features     case_boxes = TRUE,              # Enable case boxes     rolling_average_line = TRUE,     rolling_average_line_legend_label = \"7-day rolling average\",     cumulative_sum_line = TRUE,     # Add cumulative line     # Threshold line     hline = c(35),                  # Threshold value     hline_label = \"Threshold\",     hline_width = 0.5,     hline_colour = \"orange\",     hline_label_colour = \"orange\",     hline_type = \"dotdash\",     # Styling     chart_title = \"Laboratory detections by species \\n June - July 2021\",     chart_title_colour = \"#007C91\",     legend_title = \"Detected organisms\",     legend_pos = \"right\",     y_limit_max = 40,               # Set y-axis maximum     x_axis_break_labels = as.character(seq(as.Date(\"2021-06-01\"),                                            as.Date(\"2021-07-31\"),                                            by = '2 days')),  # Every 2 days     y_axis_break_labels = seq(0, 40, 5),  # Every 5 units     x_axis_title = \"Date\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90,     y_axis_label_angle = 90   ) )"},{"path":"/articles/epi-curve.html","id":"example-4-pre-aggregated-data-with-rolling-and-cumulative-lines","dir":"Articles","previous_headings":"","what":"Example 4: Pre-aggregated data with rolling and cumulative lines","title":"Epi curves","text":"working pre-aggregated data, can still add rolling averages cumulative lines trend analysis.","code":""},{"path":"/articles/epi-curve.html","id":"prepare-pre-aggregated-data","dir":"Articles","previous_headings":"Example 4: Pre-aggregated data with rolling and cumulative lines","what":"Prepare pre-aggregated data","title":"Epi curves","text":"","code":"# Create pre-aggregated data by date pre_agg_data <- epiviz::lab_data %>%   group_by(specimen_date) %>%   summarise(detections = n()) %>%   ungroup()"},{"path":"/articles/epi-curve.html","id":"create-the-pre-aggregated-epi-curve","dir":"Articles","previous_headings":"Example 4: Pre-aggregated data with rolling and cumulative lines","what":"Create the pre-aggregated epi curve","title":"Epi curves","text":"Weekly epi curve pre-aggregated counts rolling average cumulative total. Interpretation: epi curve uses pre-aggregated data rolling average cumulative lines, providing multiple perspectives temporal trends detections.","code":"epi_curve(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = pre_agg_data,     y = \"detections\",               # Specify the count column     date_var = \"specimen_date\",     date_start = \"2021-10-01\",     date_end = \"2022-03-31\",     time_period = \"iso_year_week\",  # Weekly aggregation     # Rolling and cumulative lines     rolling_average_line = TRUE,     rolling_average_line_lookback = 3,     rolling_average_line_legend_label = \"3-week rolling average\",     rolling_average_line_colour = \"#007C91\",     rolling_average_line_width = 1.5,     cumulative_sum_line = TRUE,     # Add cumulative line     cumulative_sum_line_colour = \"orange\",     chart_title = \"Laboratory Detections by Region \\nWinter 2021-22\",     chart_title_colour = \"#007C91\",     legend_pos = \"right\",     y_axis_break_labels = seq(0, 300, 50),     x_axis_title = \"ISO Week\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90,     hover_labels = \"<b>Week:<\/b> %{x}<br><b>Count:<\/b> %{y}\"  # Custom hover text   ) )"},{"path":"/articles/epi-curve.html","id":"example-5-interactive-grouped-epi-curve","dir":"Articles","previous_headings":"","what":"Example 5: Interactive grouped epi curve","title":"Epi curves","text":"Interactive epi curves ideal surveillance dashboards, allowing users explore data dynamically, zoom specific time periods, hover detailed information.","code":""},{"path":"/articles/epi-curve.html","id":"create-the-interactive-grouped-epi-curve","dir":"Articles","previous_headings":"Example 5: Interactive grouped epi curve","what":"Create the interactive grouped epi curve","title":"Epi curves","text":"Interactive stacked epi curve weekly aggregation rolling average. Interpretation: interactive epi curve allows detailed exploration weekly patterns, hover information showing exact values ability zoom specific time periods closer analysis.","code":"epi_curve(   dynamic = TRUE,   # Create interactive plotly chart   params = list(     df = epiviz::lab_data,     date_var = \"specimen_date\",     date_start = \"2021-01-01\",     date_end = \"2022-05-31\",     time_period = \"iso_year_week\",     group_var = \"organism_species_name\",     group_var_barmode = \"stack\",     fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                      \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                      \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),     rolling_average_line = TRUE,     rolling_average_line_legend_label = \"7-week rolling average\",     chart_title = \"Laboratory detections by species \\n 2021-01 - 2022-05\",     chart_footer = \"This chart has been created using simulated data.\",     x_axis_title = \"Year - ISO Week\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90,     x_axis_break_labels = week_breaks,     y_axis_break_labels = seq(0, 250, 20),     chart_title_colour = \"#007C91\",     chart_footer_colour = \"#007C91\"   ) )"},{"path":"/articles/epi-curve.html","id":"tips-for-epi-curves","dir":"Articles","previous_headings":"","what":"Tips for epi curves","title":"Epi curves","text":"Time period selection: Choose appropriate time period based analysis needs: \"day\" outbreak investigation \"iso_year_week\" weekly surveillance \"year_month\" monthly trends \"year\" annual comparisons Rolling averages: Use rolling averages smooth fluctuations identify underlying trends: rolling_average_line_lookback controls window size Customize colors line styles better visibility Cumulative lines: Add cumulative_sum_line = TRUE track total cases time, useful outbreak progression analysis. Case boxes: Enable case_boxes = TRUE interactive charts highlight specific data points interest. Threshold lines: Use hline parameters add horizontal reference lines alert levels outbreak thresholds. Pre-aggregated data: using pre-aggregated data, specify y parameter indicate column contains counts. Custom breaks: Use x_axis_break_labels y_axis_break_labels control axis tick marks better readability. Color mapping: Use named color vectors grouped data ensure consistent colors across charts. Interactive features: Set dynamic = TRUE interactive charts zooming, hovering, filtering capabilities. Chart styling: Use chart_title_colour chart_footer_colour customize text colors maintain visual consistency. Hover labels: Customize hover_labels interactive charts show specific information hovering data points. Axis limits: Use y_limit_max set maximum y-axis values better focus relevant data ranges.","code":""},{"path":"/articles/epi-map.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Epidemiological maps","text":"Epidemiological maps powerful tools visualizing geographic distribution disease cases, helping identify spatial clusters, regional patterns, areas concern. epi_map() function creates choropleth maps using spatial boundary data, allowing overlay epidemiological data geographic regions. function supports static (ggplot2) interactive (leaflet) maps extensive customization options.","code":""},{"path":"/articles/epi-map.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Epidemiological maps","text":"","code":"library(epiviz) library(dplyr) library(sf)"},{"path":"/articles/epi-map.html","id":"example-1-static-map-with-un-merged-shapefile","dir":"Articles","previous_headings":"","what":"Example 1: Static map with un-merged shapefile","title":"Epidemiological maps","text":"Local authority maps provide detailed spatial resolution outbreak investigation local surveillance. example shows Staph aureus detections London local authorities using un-merged shapefile approach.","code":""},{"path":"/articles/epi-map.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Example 1: Static map with un-merged shapefile","what":"Prepare the data","title":"Epidemiological maps","text":"","code":"# Aggregate detections by local authority for London (as used in tests) london_detections <- epiviz::lab_data %>%   filter(     region == \"London\",     organism_species_name == \"STAPHYLOCOCCUS AUREUS\"   ) %>%   group_by(local_authority_name) %>%   summarise(detections = n(), .groups = \"drop\")"},{"path":"/articles/epi-map.html","id":"create-the-static-map-with-un-merged-shapefile","dir":"Articles","previous_headings":"Example 1: Static map with un-merged shapefile","what":"Create the static map with un-merged shapefile","title":"Epidemiological maps","text":"Static choropleth Staphylococcus aureus detections across London local authorities. Interpretation: map reveals spatial distribution Staph aureus detections across London local authorities, highlighting areas higher case counts may require targeted public health interventions.","code":"epi_map(   dynamic = FALSE,  # Create static map   params = list(     df = london_detections,     value_col = \"detections\",           # Variable containing values to map     data_areacode = \"local_authority_name\",  # Variable containing area names     inc_shp = FALSE,                    # Use un-merged shapefile approach     shp_name = epiviz::London_LA_boundaries_2023,  # Spatial boundary data     shp_areacode = \"LAD23NM\",          # Variable in boundary data matching area names     fill_palette = \"Blues\",            # Color palette     fill_opacity = 1.0,                # Opacity of filled areas     break_intervals = NULL,            # Use automatic breaks     break_labels = NULL,               # Use automatic labels     force_cat = TRUE,                  # Force categorical breaks     n_breaks = NULL,                   # Use default number of breaks     labels = NULL,                     # No custom labels     map_title = \"Staphylococcus Aureus detections in London Local Authority Districts\",     map_title_size = 13,     map_title_colour = \"black\",     map_footer = \"\",     map_footer_size = 12,     map_footer_colour = \"black\",     area_labels = TRUE,                # Show area labels     area_labels_topn = NULL,           # Show all areas     legend_title = \"Number of \\nDetections\",     legend_pos = \"right\",     map_zoom = data.frame(LONG = c(-0.12776), LAT = c(51.50735), zoom = c(8.7)),  # London center     border_shape_name = NULL,          # No border shapefile     border_code_col = NULL,     border_areaname = NULL   ) )"},{"path":"/articles/epi-map.html","id":"example-2-static-map-with-pre-merged-shapefile","dir":"Articles","previous_headings":"","what":"Example 2: Static map with pre-merged shapefile","title":"Epidemiological maps","text":"already merged data spatial boundaries, can use pre-merged approach control mapping process.","code":""},{"path":"/articles/epi-map.html","id":"prepare-the-pre-merged-data","dir":"Articles","previous_headings":"Example 2: Static map with pre-merged shapefile","what":"Prepare the pre-merged data","title":"Epidemiological maps","text":"","code":"# Aggregate detections by region regional_detections <- epiviz::lab_data %>%   filter(organism_species_name == \"KLEBSIELLA PNEUMONIAE\") %>%   group_by(region) %>%   summarise(detections = n(), .groups = \"drop\") %>%   mutate(map_labels = paste0(region, \": \\n\", detections))  # Create custom labels  # Get the shapefile shape <- epiviz::PHEC_boundaries_2016  # Merge data with shapefile merged_data <- left_join(x = shape, y = regional_detections,                         by = c(\"phec16nm\" = \"region\"))"},{"path":"/articles/epi-map.html","id":"create-the-static-map-with-pre-merged-data","dir":"Articles","previous_headings":"Example 2: Static map with pre-merged shapefile","what":"Create the static map with pre-merged data","title":"Epidemiological maps","text":"Static choropleth Klebsiella pneumoniae detections across UK public health regions. Interpretation: map shows regional distribution Klebsiella pneumoniae detections across UK public health regions, custom break intervals labels better interpretation.","code":"epi_map(   dynamic = FALSE,  # Create static map   params = list(     df = merged_data,                  # Pre-merged data     value_col = \"detections\",     data_areacode = \"phec16nm\",        # Area code in merged data     inc_shp = TRUE,                    # Use pre-merged approach     shp_name = NULL,                   # No separate shapefile needed     shp_areacode = NULL,               # No separate shapefile needed     fill_palette = \"YlOrRd\",          # Yellow to red palette     fill_opacity = 0.7,                # Semi-transparent fill     break_intervals = c(0, 500, 1000, 1500, 2000, 2500),  # Custom break intervals     break_labels = c(\"0-499\", \"500-999\", \"1000-1499\", \"1500-1999\", \"2000-2499\", \"2500+\"),  # Custom labels     force_cat = TRUE,                  # Force categorical breaks     n_breaks = NULL,     labels = \"map_labels\",             # Use custom labels     map_title = \"Number of Klebsiella Pneumoniae detections \\nin UK public health regions\",     map_title_size = 12,     map_title_colour = \"orangered\",     map_footer = \"Map represents simulated test data only.\",     map_footer_size = 10,     map_footer_colour = \"black\",     area_labels = FALSE,               # Don't show area labels (using custom labels)     area_labels_topn = NULL,     legend_title = \"Number of \\nDetections\",     legend_pos = \"topright\",     map_zoom = NULL,                   # Use default zoom     border_shape_name = NULL,     border_code_col = NULL,     border_areaname = NULL   ) )"},{"path":"/articles/epi-map.html","id":"example-3-static-map-with-border-shapefile","dir":"Articles","previous_headings":"","what":"Example 3: Static map with border shapefile","title":"Epidemiological maps","text":"Border shapefiles allow add additional geographic context, country boundaries administrative regions.","code":""},{"path":"/articles/epi-map.html","id":"create-the-map-with-border-shapefile","dir":"Articles","previous_headings":"Example 3: Static map with border shapefile","what":"Create the map with border shapefile","title":"Epidemiological maps","text":"Static choropleth UK country border overlays. Interpretation: map includes border shapefiles show country boundaries, providing additional geographic context regional analysis.","code":"# Use the same regional data regional_detections <- epiviz::lab_data %>%   filter(organism_species_name == \"KLEBSIELLA PNEUMONIAE\") %>%   group_by(region) %>%   summarise(detections = n(), .groups = \"drop\") %>%   mutate(map_labels = paste0(region, \": \\n\", detections))  # Get shapefiles shape <- epiviz::PHEC_boundaries_2016 border_shape <- epiviz::UK_boundaries_2023  epi_map(   dynamic = FALSE,  # Create static map   params = list(     df = regional_detections,     value_col = \"detections\",     data_areacode = \"region\",     inc_shp = FALSE,                   # Use un-merged approach     shp_name = shape,                  # Main shapefile     shp_areacode = \"phec16nm\",         # Area code in main shapefile     fill_palette = \"YlOrRd\",     fill_opacity = 0.7,     break_intervals = c(0, 500, 1000, 1500, 2000, 2500),     break_labels = c(\"0-499\", \"500-999\", \"1000-1499\", \"1500-1999\", \"2000-2499\", \"2500+\"),     force_cat = TRUE,     n_breaks = NULL,     labels = \"map_labels\",     map_title = \"Number of Klebsiella Pneumoniae detections \\nin UK public health regions\",     map_title_size = 12,     map_title_colour = \"orangered\",     map_footer = \"Map represents simulated test data only.\",     map_footer_size = 10,     map_footer_colour = \"black\",     area_labels = FALSE,     area_labels_topn = NULL,     legend_title = \"Number of \\nDetections\",     legend_pos = \"topright\",     map_zoom = NULL,     # Border shapefile parameters     border_shape_name = border_shape,  # Border shapefile     border_code_col = \"CTRY23NM\",     # Area code in border shapefile     border_areaname = c(\"Wales\", \"Northern Ireland\", \"Scotland\")  # Areas to highlight   ) )"},{"path":"/articles/epi-map.html","id":"example-4-interactive-map-with-un-merged-shapefile","dir":"Articles","previous_headings":"","what":"Example 4: Interactive map with un-merged shapefile","title":"Epidemiological maps","text":"Interactive maps ideal surveillance dashboards, allowing users zoom, pan, hover detailed information.","code":""},{"path":"/articles/epi-map.html","id":"create-the-interactive-map","dir":"Articles","previous_headings":"Example 4: Interactive map with un-merged shapefile","what":"Create the interactive map","title":"Epidemiological maps","text":"Interactive choropleth Staphylococcus aureus detections across London. Interpretation: interactive map allows detailed exploration spatial distribution, hover information showing exact detection counts local authority.","code":"epi_map(   dynamic = TRUE,   # Create interactive leaflet map   params = list(     df = london_detections,     value_col = \"detections\",     data_areacode = \"local_authority_name\",     inc_shp = FALSE,     shp_name = epiviz::London_LA_boundaries_2023,     shp_areacode = \"LAD23NM\",     fill_palette = \"Blues\",     fill_opacity = 1.0,     break_intervals = NULL,     break_labels = NULL,     force_cat = TRUE,     n_breaks = NULL,     labels = NULL,     map_title = \"Staphylococcus Aureus detections in London Local Authority Districts\",     map_title_size = 13,     map_title_colour = \"black\",     map_footer = \"\",     map_footer_size = 12,     map_footer_colour = \"black\",     area_labels = TRUE,     area_labels_topn = NULL,     legend_title = \"Number of \\nDetections\",     legend_pos = \"topright\",     map_zoom = data.frame(LONG = c(-0.12776), LAT = c(51.50735), zoom = c(8.7)),     border_shape_name = NULL,     border_code_col = NULL,     border_areaname = NULL   ) )"},{"path":"/articles/epi-map.html","id":"example-5-interactive-map-with-border-shapefile-and-area-labels","dir":"Articles","previous_headings":"","what":"Example 5: Interactive map with border shapefile and area labels","title":"Epidemiological maps","text":"Interactive maps can include border shapefiles custom area labeling comprehensive geographic analysis.","code":""},{"path":"/articles/epi-map.html","id":"create-the-interactive-map-with-borders-and-labels","dir":"Articles","previous_headings":"Example 5: Interactive map with border shapefile and area labels","what":"Create the interactive map with borders and labels","title":"Epidemiological maps","text":"Interactive choropleth Klebsiella pneumoniae detections country borders labels. Interpretation: comprehensive interactive map combines regional data visualization country borders area labeling, providing multiple layers geographic information surveillance analysis.","code":"epi_map(   dynamic = TRUE,   # Create interactive leaflet map   params = list(     df = regional_detections,     value_col = \"detections\",     data_areacode = \"region\",     inc_shp = FALSE,     shp_name = shape,     shp_areacode = \"phec16nm\",     fill_palette = \"YlOrRd\",     fill_opacity = 0.7,     break_intervals = c(0, 500, 1000, 1500, 2000, 2500),     break_labels = c(\"0-499\", \"500-999\", \"1000-1499\", \"1500-1999\", \"2000-2499\", \"2500+\"),     force_cat = TRUE,     n_breaks = NULL,     labels = \"map_labels\",     map_title = \"Number of Klebsiella Pneumoniae detections \\nin UK public health regions\",     map_title_size = 12,     map_title_colour = \"orangered\",     map_footer = \"Map represents simulated test data only.\",     map_footer_size = 10,     map_footer_colour = \"black\",     area_labels = TRUE,                # Show area labels     area_labels_topn = 5,              # Show top 5 areas     legend_title = \"Number of \\nDetections\",     legend_pos = \"topright\",     map_zoom = data.frame(LONG = c(-2.89479), LAT = c(54.793409), zoom = c(5)),  # UK center     border_shape_name = border_shape,     border_code_col = \"CTRY23NM\",     border_areaname = c(\"Wales\", \"Northern Ireland\", \"Scotland\")   ) )"},{"path":"/articles/epi-map.html","id":"tips-for-epidemiological-maps","dir":"Articles","previous_headings":"","what":"Tips for epidemiological maps","title":"Epidemiological maps","text":"Data preparation: Always aggregate epidemiological data appropriate geographic level mapping. function expects pre-calculated counts values. Shapefile approaches: Un-merged (inc_shp = FALSE): Use separate data shapefile Pre-merged (inc_shp = TRUE): Use ’ve already joined data spatial boundaries Area code matching: Ensure area names data exactly match names boundary data. Use unique() check mismatches. Color palettes: Choose appropriate color schemes: \"Blues\" general use \"YlOrRd\" intensity (yellow red) \"Reds\" high values \"Greens\" positive indicators Break intervals: Use custom break_intervals break_labels meaningful categorization: Map zoom: Use map_zoom center zoom map appropriately: Border shapefiles: Add border_shape_name additional geographic context like country boundaries. Area labels: Use area_labels = TRUE area_labels_topn show labels important areas. Interactive features: Set dynamic = TRUE interactive maps zooming, panning, hover information. Opacity: Adjust fill_opacity (0-1) control transparency filled areas. Legend positioning: Use legend_pos place legend doesn’t obscure important map features. Custom labels: Create custom labels data informative hover text area labels.","code":"break_intervals = c(0, 500, 1000, 1500, 2000, 2500) break_labels = c(\"0-499\", \"500-999\", \"1000-1499\", \"1500-1999\", \"2000-2499\", \"2500+\") map_zoom = data.frame(LONG = c(-0.12776), LAT = c(51.50735), zoom = c(8.7))"},{"path":"/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with epiviz","text":"epiviz package provides epidemiological visualization functions creating static (ggplot2) interactive (plotly) charts commonly used public health surveillance outbreak investigation. guide introduces package using built-lab_data dataset.","code":""},{"path":"/articles/getting-started.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Getting started with epiviz","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/getting-started.html","id":"the-lab_data-dataset","dir":"Articles","previous_headings":"","what":"The lab_data dataset","title":"Getting started with epiviz","text":"lab_data synthetic laboratory dataset included epiviz demonstration purposes. contains simulated laboratory detection data typical epidemiological variables: dataset includes: - Patient demographics: date_of_birth, sex - Laboratory information: organism_species_name, specimen_date, lab_code - Geographic data: local_authority_name, local_authority_code, region","code":"# Explore the structure of lab_data glimpse(epiviz::lab_data) ## Rows: 32,560 ## Columns: 8 ## $ date_of_birth         <date> 1938-10-05, 1957-04-04, 1927-06-24, 1962-06-14,… ## $ sex                   <fct> Female, Male, Male, Male, Male, Male, Male, Male… ## $ organism_species_name <fct> KLEBSIELLA PNEUMONIAE, KLEBSIELLA PNEUMONIAE, ST… ## $ specimen_date         <date> 2020-05-24, 2023-07-08, 2023-02-24, 2023-08-26,… ## $ lab_code              <fct> BI20985, JH70033, CU5997, ES3851, YA29556, QF111… ## $ local_authority_name  <chr> \"Worthing\", \"Reading\", \"Plymouth\", \"Cheshire Wes… ## $ local_authority_code  <chr> \"E07000229\", \"E06000038\", \"E06000026\", \"E0600005… ## $ region                <chr> \"South East\", \"South East\", \"South West\", \"North…"},{"path":"/articles/getting-started.html","id":"example-1-regional-distribution-of-detections","dir":"Articles","previous_headings":"","what":"Example 1: Regional distribution of detections","title":"Getting started with epiviz","text":"analyzing laboratory surveillance data, often want understand geographic distribution detections. ’ll create simple column chart showing detections region specific time period.","code":""},{"path":"/articles/getting-started.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Example 1: Regional distribution of detections","what":"Prepare the data","title":"Getting started with epiviz","text":"","code":"# Filter to a specific time period and aggregate by region regional_detections <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-01-31\")   ) %>%   count(region, name = \"detections\") %>%   arrange(desc(detections)) %>%   slice(1:6) %>%  # Keep top 6 regions for readability   mutate(     # Handle long region names for better display     region = ifelse(region == \"Yorkshire and Humber\",                     \"Yorkshire and\\nHumber\", region)   )"},{"path":"/articles/getting-started.html","id":"create-the-visualization","dir":"Articles","previous_headings":"Example 1: Regional distribution of detections","what":"Create the visualization","title":"Getting started with epiviz","text":"Interpretation: chart shows regional distribution laboratory detections January 2023, London highest number detections.","code":"col_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = regional_detections,     x = \"region\",           # Variable for x-axis     y = \"detections\",       # Variable for y-axis     fill_colours = \"#007C91\",  # Single color for all bars     chart_title = \"Laboratory detections by region (January 2023)\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45,  # Rotate labels for readability     show_gridlines = FALSE     # Remove grid lines for cleaner look   ) )"},{"path":"/articles/getting-started.html","id":"example-2-temporal-trends-in-detections","dir":"Articles","previous_headings":"","what":"Example 2: Temporal trends in detections","title":"Getting started with epiviz","text":"Time series analysis fundamental epidemiological surveillance. ’ll create line chart showing monthly trends detections two-year period.","code":""},{"path":"/articles/getting-started.html","id":"prepare-the-data-1","dir":"Articles","previous_headings":"Example 2: Temporal trends in detections","what":"Prepare the data","title":"Getting started with epiviz","text":"","code":"# Aggregate detections by month monthly_detections <- epiviz::lab_data %>%   filter(     specimen_date >= as.Date(\"2022-01-01\"),     specimen_date <= as.Date(\"2023-12-31\")   ) %>%   mutate(     specimen_month = floor_date(specimen_date, \"month\")   ) %>%   count(specimen_month, name = \"detections\")"},{"path":"/articles/getting-started.html","id":"create-the-visualization-1","dir":"Articles","previous_headings":"Example 2: Temporal trends in detections","what":"Create the visualization","title":"Getting started with epiviz","text":"Interpretation: line chart reveals seasonal patterns laboratory detections, potential peaks troughs throughout two-year period.","code":"line_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     dfr = monthly_detections,   # Note: use 'dfr' parameter for line_chart     x = \"specimen_month\",      # Date variable for x-axis     y = \"detections\",          # Count variable for y-axis     line_colour = c(\"#007C91\"), # Color for the line (vector format)     line_type = c(\"solid\")     # Line type   ) )"},{"path":"/articles/getting-started.html","id":"tips-for-getting-started","dir":"Articles","previous_headings":"","what":"Tips for getting started","title":"Getting started with epiviz","text":"Start static charts: Use dynamic = FALSE initially create ggplot2 charts, switch dynamic = TRUE interactive plotly charts need zooming, hovering, filtering capabilities. Filter data: lab_data dataset quite large. Always filter specific time periods, regions, organisms create readable visualizations. Check data structure: Use glimpse() str() understand data passing visualization functions. Parameter naming: functions use params list organize parameters. keeps function calls clean allows easy parameter reuse. Color consistency: Use consistent color schemes across visualizations. package provides sensible defaults, can customize colors using *_colours parameters.","code":""},{"path":"/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Getting started with epiviz","text":"Explore function-specific vignettes detailed examples visualization type Try setting dynamic = TRUE examples see interactive versions Experiment different time periods filters explore lab_data dataset","code":""},{"path":"/articles/line-chart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Line charts","text":"Line charts essential visualising temporal trends epidemiological data, showing disease occurrence changes time. particularly valuable identifying seasonal patterns, outbreak progression, long-term surveillance trends. line_chart() function supports single multiple time series extensive customisation options colors, line styles, interactive features.","code":""},{"path":"/articles/line-chart.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Line charts","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/line-chart.html","id":"example-1-single-time-series-without-grouping","dir":"Articles","previous_headings":"","what":"Example 1: Single time series without grouping","title":"Line charts","text":"Single time series line charts ideal tracking overall trends disease occurrence time. example shows daily detections specific organism.","code":""},{"path":"/articles/line-chart.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Example 1: Single time series without grouping","what":"Prepare the data","title":"Line charts","text":"","code":"# Filter and aggregate data for a single organism (as used in tests) single_series_data <- epiviz::lab_data %>%   filter(     organism_species_name == \"KLEBSIELLA PNEUMONIAE\",     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-01-31\")   ) %>%   group_by(specimen_date) %>%   summarise(count = n(), .groups = 'drop') %>%   as.data.frame()  # Ensure it's a data frame"},{"path":"/articles/line-chart.html","id":"create-the-single-time-series-line-chart","dir":"Articles","previous_headings":"Example 1: Single time series without grouping","what":"Create the single time series line chart","title":"Line charts","text":"Daily detections Klebsiella pneumoniae January 2023. Interpretation: line chart shows daily progression Klebsiella pneumoniae detections January 2023, revealing day--day variations overall trends.","code":"line_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = single_series_data,        # Note: use 'dfr' parameter (as in tests)     x = \"specimen_date\",             # Date variable for x-axis     y = \"count\",                     # Count variable for y-axis     line_colour = c(\"blue\"),         # Single color for single line     line_type = c(\"solid\")           # Line type   ) )"},{"path":"/articles/line-chart.html","id":"example-2-multiple-time-series-with-grouping","dir":"Articles","previous_headings":"","what":"Example 2: Multiple time series with grouping","title":"Line charts","text":"Multiple time series allow comparison trends across different categories, organism types. example compares detections different organisms time.","code":""},{"path":"/articles/line-chart.html","id":"prepare-the-grouped-data","dir":"Articles","previous_headings":"Example 2: Multiple time series with grouping","what":"Prepare the grouped data","title":"Line charts","text":"","code":"# Aggregate data for multiple organisms (as used in tests) multi_series_data <- epiviz::lab_data %>%   group_by(organism_species_name, specimen_date) %>%   summarise(count = n(), .groups = 'drop') %>%   ungroup() %>%   filter(     specimen_date >= as.Date(\"2023-12-01\"),     specimen_date <= as.Date(\"2023-12-31\")   ) %>%   as.data.frame()  # Ensure it's a data frame"},{"path":"/articles/line-chart.html","id":"create-the-multiple-time-series-line-chart","dir":"Articles","previous_headings":"Example 2: Multiple time series with grouping","what":"Create the multiple time series line chart","title":"Line charts","text":"Daily detections organism species across month December 2023. Interpretation: multiple time series chart allows direct comparison trends different organisms, revealing whether follow similar seasonal patterns distinct temporal behaviors.","code":"line_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = multi_series_data,         # Use 'df' parameter     x = \"specimen_date\",             # Date variable for x-axis     y = \"count\",                     # Count variable for y-axis     group_var = \"organism_species_name\",  # Group by organism type     line_colour = c(\"blue\", \"green\", \"orange\"),  # Colors for each organism     line_type = c(\"solid\", \"dotted\", \"dashed\")   # Different line styles   ) )"},{"path":"/articles/line-chart.html","id":"example-3-interactive-multiple-time-series","dir":"Articles","previous_headings":"","what":"Example 3: Interactive multiple time series","title":"Line charts","text":"Interactive line charts ideal surveillance dashboards, allowing users explore data dynamically, zoom specific time periods, hover detailed information.","code":""},{"path":"/articles/line-chart.html","id":"create-the-interactive-line-chart","dir":"Articles","previous_headings":"Example 3: Interactive multiple time series","what":"Create the interactive line chart","title":"Line charts","text":"Interactive comparison organism-specific detections across December 2023. Interpretation: interactive line chart allows detailed exploration temporal patterns, hover information showing exact values ability zoom specific time periods closer analysis.","code":"line_chart(   dynamic = TRUE,   # Create interactive plotly chart   params = list(     df = multi_series_data,         # Use 'df' parameter     x = \"specimen_date\",             # Date variable for x-axis     y = \"count\",                     # Count variable for y-axis     group_var = \"organism_species_name\",  # Group by organism type     line_colour = c(\"blue\", \"green\", \"orange\"),  # Colors for each organism     line_type = c(\"solid\", \"dotted\", \"dashed\")   # Different line styles   ) )"},{"path":"/articles/line-chart.html","id":"example-4-custom-styled-line-chart-with-enhanced-formatting","dir":"Articles","previous_headings":"","what":"Example 4: Custom styled line chart with enhanced formatting","title":"Line charts","text":"Enhanced line charts custom styling useful creating publication-ready visualisations specific formatting requirements.","code":""},{"path":"/articles/line-chart.html","id":"prepare-data-for-enhanced-styling","dir":"Articles","previous_headings":"Example 4: Custom styled line chart with enhanced formatting","what":"Prepare data for enhanced styling","title":"Line charts","text":"","code":"# Create a focused dataset for enhanced styling enhanced_data <- epiviz::lab_data %>%   filter(     organism_species_name == \"STAPHYLOCOCCUS AUREUS\",     specimen_date >= as.Date(\"2023-06-01\"),     specimen_date <= as.Date(\"2023-08-31\")   ) %>%   mutate(     specimen_week = floor_date(specimen_date, \"week\", week_start = 1)  # Monday start   ) %>%   count(specimen_week, name = \"detections\")"},{"path":"/articles/line-chart.html","id":"create-the-enhanced-line-chart","dir":"Articles","previous_headings":"Example 4: Custom styled line chart with enhanced formatting","what":"Create the enhanced line chart","title":"Line charts","text":"Weekly Staphylococcus aureus detections summer 2023. Interpretation: enhanced line chart provides detailed view weekly patterns summer period, custom styling better visual presentation.","code":"line_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     dfr = enhanced_data,             # Use 'dfr' parameter     x = \"specimen_week\",             # Weekly date variable     y = \"detections\",                # Count variable     line_colour = c(\"#FF7F32\"),      # Orange color     line_type = c(\"solid\"),          # Solid line     # Additional styling parameters (if supported by the function)     chart_title = \"Weekly Staph aureus detections (Summer 2023)\",     x_axis_title = \"Week\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45,     show_gridlines = TRUE,     y_axis_limits = c(0, NA)   ) )"},{"path":"/articles/line-chart.html","id":"tips-for-line-charts","dir":"Articles","previous_headings":"","what":"Tips for line charts","title":"Line charts","text":"Data preparation: Always ensure data properly aggregated formatted data frame passing function. Date handling: Ensure date variable properly formatted Date class correct temporal visualisation. Grouping: Use group_var create multiple lines comparison. group get different color line style. Line styling: Customize appearance : line_colour: Vector colors different series line_type: Vector line styles (“solid”, “dotted”, “dashed”) Color choices: Choose colors distinguishable accessible, especially important grouping multiple categories. Interactive features: Set dynamic = TRUE interactive charts zooming, hovering, filtering capabilities. Data frame conversion: Always use .data.frame() ensure data correct format, shown test examples. Time period selection: Choose appropriate time periods (daily, weekly, monthly) based analysis needs expected patterns data. Multiple series: comparing multiple time series, ensure series data time periods avoid gaps visualisation. Line types: Use different line types (\"solid\", \"dotted\", \"dashed\") distinguish series, especially useful black white printing. Data validation: Always check aggregated data covers expected time periods counts reasonable visualisation.","code":""},{"path":"/articles/llm-interpret.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"LLM-assisted epidemiological narrative","text":"llm_interpret() function integrates Large Language Model (LLM) capabilities automatically interpret epidemiological visualisations data. powerful feature can generate insights, identify patterns, provide contextual analysis charts datasets, making valuable surveillance reporting data exploration.","code":""},{"path":"/articles/llm-interpret.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"LLM-assisted epidemiological narrative","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/llm-interpret.html","id":"environment-setup","dir":"Articles","previous_headings":"","what":"Environment Setup","title":"LLM-assisted epidemiological narrative","text":"using llm_interpret(), set provider-agnostic environment variables. function reads.","code":""},{"path":"/articles/llm-interpret.html","id":"required-environment-variables","dir":"Articles","previous_headings":"Environment Setup","what":"Required Environment Variables","title":"LLM-assisted epidemiological narrative","text":"Set .Renviron file R session:","code":"# Provider: one of \"openai\", \"gemini\", or \"anthropic\" Sys.setenv(LLM_PROVIDER = \"openai\")  # API key for the chosen provider Sys.setenv(LLM_API_KEY = \"your-api-key\")  # Model for the chosen provider (examples) Sys.setenv(LLM_MODEL = \"gpt-4.1-nano\")        # OpenAI # Sys.setenv(LLM_MODEL = \"gemini-2.5-flash-lite\")  # Google # Sys.setenv(LLM_MODEL = \"claude-sonnet-4-20250514\")          # Anthropic"},{"path":"/articles/llm-interpret.html","id":"verify-setup","dir":"Articles","previous_headings":"Environment Setup","what":"Verify Setup","title":"LLM-assisted epidemiological narrative","text":"","code":"if (Sys.getenv(\"LLM_PROVIDER\") != \"\" && Sys.getenv(\"LLM_API_KEY\") != \"\" && Sys.getenv(\"LLM_MODEL\") != \"\") {   cat(\"LLM environment is configured\\n\") } else {   cat(\"Please set LLM_PROVIDER, LLM_API_KEY and LLM_MODEL\\n\") }"},{"path":"/articles/llm-interpret.html","id":"example-1-interpreting-an-epidemic-curve","dir":"Articles","previous_headings":"","what":"Example 1: Interpreting an epidemic curve","title":"LLM-assisted epidemiological narrative","text":"example demonstrates use LLM interpretation analy#sze epidemic curve generate insights temporal patterns.","code":""},{"path":"/articles/llm-interpret.html","id":"prepare-the-data-and-create-a-visualization","dir":"Articles","previous_headings":"Example 1: Interpreting an epidemic curve","what":"Prepare the data and create a visualization","title":"LLM-assisted epidemiological narrative","text":"","code":"# Create an epidemic curve for interpretation epi_data <- epiviz::lab_data %>%   filter(     organism_species_name == \"STAPHYLOCOCCUS AUREUS\",     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-12-31\")   )  # Create the epidemic curve epi_curve_plot <- epi_curve(   dynamic = FALSE,   params = list(     df = epi_data,     date_var = \"specimen_date\",     date_start = \"2023-01-01\",     date_end = \"2023-12-31\",     time_period = \"year_month\",     fill_colours = \"#007C91\",     chart_title = \"Monthly Staph aureus detections (2023)\",     x_axis_title = \"Month\",     y_axis_title = \"Number of detections\"   ) )  # Display the plot print(epi_curve_plot)"},{"path":"/articles/llm-interpret.html","id":"interpret-the-visualisation","dir":"Articles","previous_headings":"Example 1: Interpreting an epidemic curve","what":"Interpret the visualisation","title":"LLM-assisted epidemiological narrative","text":"Interpretation: LLM analyse epidemic curve provide insights temporal patterns, seasonal trends, notable peaks anomalies data.","code":"# Use LLM to interpret the epidemic curve interpretation <- llm_interpret(   input = epi_curve_plot,   word_limit = 120,   prompt_extension = \"Analyse this epidemic curve and identify notable patterns, trends, or anomalies. Focus on seasonal patterns and potential outbreak periods.\" )  # Display the interpretation cat(\"LLM Interpretation:\\n\") cat(interpretation)"},{"path":"/articles/llm-interpret.html","id":"example-2-custom-interpretation-with-specific-focus","dir":"Articles","previous_headings":"","what":"Example 2: Custom interpretation with specific focus","title":"LLM-assisted epidemiological narrative","text":"example shows provide custom prompt guide LLM’s analysis toward specific epidemiological concerns.","code":""},{"path":"/articles/llm-interpret.html","id":"prepare-the-data-and-create-a-visualization-1","dir":"Articles","previous_headings":"Example 2: Custom interpretation with specific focus","what":"Prepare the data and create a visualization","title":"LLM-assisted epidemiological narrative","text":"","code":"# Create an age-sex pyramid for interpretation pyramid_data <- epiviz::lab_data %>%   filter(     organism_species_name == \"KLEBSIELLA PNEUMONIAE\",     specimen_date >= as.Date(\"2023-01-01\"),     specimen_date <= as.Date(\"2023-06-30\")   )  # Create the age-sex pyramid pyramid_plot <- age_sex_pyramid(   dynamic = FALSE,   params = list(     df = pyramid_data,     var_map = list(dob_var = \"date_of_birth\", sex_var = \"sex\"),     grouped = FALSE,     mf_colours = c(\"#440154\", \"#2196F3\"),     x_axis_title = \"Number of cases\",     y_axis_title = \"Age group (years)\",     legend_title = \"Klebsiella pneumoniae cases by age and sex (H1 2023)\"   ) )  # Display the plot print(pyramid_plot)"},{"path":"/articles/llm-interpret.html","id":"interpret-with-custom-epidemiological-focus","dir":"Articles","previous_headings":"Example 2: Custom interpretation with specific focus","what":"Interpret with custom epidemiological focus","title":"LLM-assisted epidemiological narrative","text":"Interpretation: LLM provide detailed epidemiological analysis focusing risk groups, potential transmission patterns, public health recommendations based demographic distribution shown pyramid.","code":"# Use LLM with a custom prompt focused on public health implications custom_interpretation <- llm_interpret(   input = pyramid_plot,   word_limit = 150,   prompt_extension = \"As a public health epidemiologist, analyze this age-sex pyramid for Klebsiella pneumoniae cases. Identify which demographic groups are most at risk, discuss potential risk factors, and suggest targeted prevention strategies. Consider healthcare-associated infections and community transmission patterns.\" )  # Display the custom interpretation cat(\"Custom Epidemiological Analysis:\\n\") cat(custom_interpretation)"},{"path":"/articles/llm-interpret.html","id":"tips-for-llm-interpretation","dir":"Articles","previous_headings":"","what":"Tips for LLM interpretation","title":"LLM-assisted epidemiological narrative","text":"Store API keys securely .Renviron file Never commit API keys version control Use different keys different environments (development, production) specific want LLM focus Include context epidemiological scenario Ask actionable insights recommendations Specify level detail need cautious sensitive health data Consider using aggregated anonymised data LLM interpretation Review organisation’s data sharing policies LLM API calls costs based usage Start smaller datasets testing Always review LLM interpretations accuracy Cross-reference domain expertise Use LLM insights starting point analysis Use LLM interpretation automated report generation Incorporate surveillance dashboards Generate insights outbreak investigation","code":""},{"path":[]},{"path":"/articles/llm-interpret.html","id":"common-issues","dir":"Articles","previous_headings":"Troubleshooting","what":"Common Issues","title":"LLM-assisted epidemiological narrative","text":"API Key Found: Ensure environment variables properly set accessible R. Rate Limiting: hit rate limits, implement delays requests use different API keys. Model Available: Check specified model available API plan.","code":""},{"path":"/articles/point-chart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Point charts","text":"Point charts (scatter plots) versatile tools exploring relationships variables epidemiological data. can show correlations, identify outliers, reveal patterns might apparent visualisations. point_chart() function supports various point styles, confidence ribbons, threshold lines, static interactive visualisations.","code":""},{"path":"/articles/point-chart.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Point charts","text":"","code":"library(epiviz) library(dplyr) library(lubridate)"},{"path":"/articles/point-chart.html","id":"example-1-basic-point-chart","dir":"Articles","previous_headings":"","what":"Example 1: Basic point chart","title":"Point charts","text":"Basic point charts ideal exploring relationships two continuous variables. example shows monthly detections time.","code":""},{"path":"/articles/point-chart.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Example 1: Basic point chart","what":"Prepare the data","title":"Point charts","text":"","code":"# Create monthly data (as used in tests) monthly_data <- epiviz::lab_data %>%   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) %>%   summarise(detections = n()) %>%   ungroup()"},{"path":"/articles/point-chart.html","id":"create-the-basic-point-chart","dir":"Articles","previous_headings":"Example 1: Basic point chart","what":"Create the basic point chart","title":"Point charts","text":"Monthly detections point markers across 2023. Interpretation: point chart shows relationship time monthly detections, revealing temporal patterns outliers data.","code":"point_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = monthly_data,     x = \"specimen_month\",        # Date variable for x-axis     y = \"detections\",           # Count variable for y-axis     point_colours = \"#007C91\",  # Color for points     point_size = 3,             # Size of points     x_limit_min = \"2023-01-01\", # X-axis minimum     x_limit_max = \"2023-12-31\", # X-axis maximum     chart_title = \"Detections per Month 2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\"  # Show every 2 months   ) )"},{"path":"/articles/point-chart.html","id":"example-2-interactive-point-chart","dir":"Articles","previous_headings":"","what":"Example 2: Interactive point chart","title":"Point charts","text":"Interactive point charts allow users explore data dynamically, hover information zooming capabilities.","code":""},{"path":"/articles/point-chart.html","id":"create-the-interactive-point-chart","dir":"Articles","previous_headings":"Example 2: Interactive point chart","what":"Create the interactive point chart","title":"Point charts","text":"Interactive monthly detections hover detail. Interpretation: interactive version allows detailed exploration temporal patterns, hover information showing exact values month.","code":"point_chart(   dynamic = TRUE,   # Create interactive plotly chart   params = list(     df = monthly_data,     x = \"specimen_month\",     y = \"detections\",     point_colours = \"#007C91\",     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\"   ) )"},{"path":"/articles/point-chart.html","id":"example-3-grouped-point-chart-with-confidence-ribbons","dir":"Articles","previous_headings":"","what":"Example 3: Grouped point chart with confidence ribbons","title":"Point charts","text":"Grouped point charts confidence ribbons excellent comparing multiple categories showing uncertainty estimates.","code":""},{"path":"/articles/point-chart.html","id":"prepare-grouped-data-with-confidence-intervals","dir":"Articles","previous_headings":"Example 3: Grouped point chart with confidence ribbons","what":"Prepare grouped data with confidence intervals","title":"Point charts","text":"","code":"# Create grouped data with confidence intervals (as used in tests) set.seed(123) grouped_data <- epiviz::lab_data %>%   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month'),            organism_species_name) %>%   summarise(detections = n()) %>%   ungroup() %>%   mutate(     offset = sample(10:50, n(), replace = TRUE),     lower_limit = pmax(detections - offset, 0),     upper_limit = detections + offset   ) %>%   select(-offset)"},{"path":"/articles/point-chart.html","id":"create-the-grouped-point-chart-with-confidence-ribbons","dir":"Articles","previous_headings":"Example 3: Grouped point chart with confidence ribbons","what":"Create the grouped point chart with confidence ribbons","title":"Point charts","text":"Grouped monthly detections confidence ribbons. Interpretation: grouped point chart shows detections organism type time, confidence ribbons indicating uncertainty around estimates.","code":"point_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = grouped_data,     x = \"specimen_month\",     y = \"detections\",     group_var = \"organism_species_name\",  # Group by organism type     point_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),  # Colors for each group     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\",     y_axis_break_labels = seq(0, 600, 100),  # Custom y-axis breaks     x_axis_label_angle = 45,                 # Rotate x-axis labels     # Confidence interval parameters     ci = \"ribbon\",                           # Use ribbon for confidence intervals     ci_lower = \"lower_limit\",                # Lower confidence limit column     ci_upper = \"upper_limit\",                # Upper confidence limit column     ci_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\")  # Colors for confidence ribbons   ) )"},{"path":"/articles/point-chart.html","id":"example-4-point-chart-with-threshold-lines","dir":"Articles","previous_headings":"","what":"Example 4: Point chart with threshold lines","title":"Point charts","text":"Threshold lines help identify data points exceed fall important cutoffs, outbreak levels target values.","code":""},{"path":"/articles/point-chart.html","id":"create-the-point-chart-with-threshold-lines","dir":"Articles","previous_headings":"Example 4: Point chart with threshold lines","what":"Create the point chart with threshold lines","title":"Point charts","text":"Grouped monthly detections threshold lines. Interpretation: point chart includes threshold lines identify months detections exceeded specific levels, helping prioritize periods investigation.","code":"point_chart(   dynamic = FALSE,  # Create static ggplot chart   params = list(     df = grouped_data,     x = \"specimen_month\",     y = \"detections\",     group_var = \"organism_species_name\",     point_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\",     y_axis_break_labels = seq(0, 600, 100),     x_axis_label_angle = 45,     ci = \"ribbon\",     ci_lower = \"lower_limit\",     ci_upper = \"upper_limit\",     ci_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),     # Threshold lines     hline = c(450, 550),                    # Multiple threshold lines     hline_colour = c(\"blue\", \"red\"),        # Colors for each line     hline_label = c(\"threshold 1\", \"threshold 2\"),  # Labels for lines     hline_label_colour = c(\"blue\", \"red\")   # Label colors   ) )"},{"path":"/articles/point-chart.html","id":"example-5-interactive-grouped-point-chart-with-all-features","dir":"Articles","previous_headings":"","what":"Example 5: Interactive grouped point chart with all features","title":"Point charts","text":"Interactive point charts features provide comprehensive view surveillance dashboards exploratory analysis.","code":""},{"path":"/articles/point-chart.html","id":"create-the-comprehensive-interactive-point-chart","dir":"Articles","previous_headings":"Example 5: Interactive grouped point chart with all features","what":"Create the comprehensive interactive point chart","title":"Point charts","text":"Interactive grouped point chart confidence ribbons thresholds. Interpretation: comprehensive interactive point chart combines grouped data visualization confidence ribbons threshold lines, providing multiple layers information surveillance analysis.","code":"point_chart(   dynamic = TRUE,   # Create interactive plotly chart   params = list(     df = grouped_data,     x = \"specimen_month\",     y = \"detections\",     group_var = \"organism_species_name\",     point_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\",     y_axis_break_labels = seq(0, 600, 100),     x_axis_label_angle = 45,     ci = \"ribbon\",     ci_lower = \"lower_limit\",     ci_upper = \"upper_limit\",     ci_colours = c(\"#007C91\", \"#8A1B61\", \"#FF7F32\"),     hline = c(450, 550),     hline_colour = c(\"blue\", \"red\"),     hline_label = c(\"threshold 1\", \"threshold 2\"),     hline_label_colour = c(\"blue\", \"red\")   ) )"},{"path":"/articles/point-chart.html","id":"tips-for-point-charts","dir":"Articles","previous_headings":"","what":"Tips for point charts","title":"Point charts","text":"Data preparation: Always aggregate data appropriately passing point_chart(). function expects pre-calculated counts values. Date handling: Use lubridate::floor_date() create consistent time periods aggregation, shown test examples. Confidence intervals: Use ci = \"ribbon\" ci_lower ci_upper parameters add confidence ribbons around data points. Threshold lines: Use hline parameters add horizontal reference lines alert levels targets: Grouping: Use group_var create multiple series comparison. group get different color. Point styling: Customize appearance : point_colours: Colors points (vector multiple groups) point_size: Size points ci_colours: Colors confidence ribbons Axis limits: Use x_limit_min x_limit_max control x-axis range better focus relevant time periods. Interactive features: Set dynamic = TRUE interactive charts zooming, hovering, filtering capabilities. Axis formatting: Use x_axis_date_breaks y_axis_break_labels control dates values displayed axes. Label rotation: Use x_axis_label_angle rotate date labels better readability. Confidence ribbon colors: Ensure ci_colours matches point_colours consistent visual representation. Random confidence intervals: test examples, confidence intervals generated randomly. real applications, use appropriate statistical methods calculate meaningful confidence intervals.","code":"hline = c(450, 550), hline_colour = c(\"blue\", \"red\"), hline_label = c(\"threshold 1\", \"threshold 2\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harshana Liyanage. Author, maintainer. Alex Bhattacharya. Author. James Duke. Author. Liam Fitzpatrick. Author. James Leatherland. Author. Jordan Worth. Author. Emma Parker. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liyanage H, Bhattacharya , Duke J, Fitzpatrick L, Leatherland J, Worth J, Parker E (2025). epiviz: Data Visualisation Functions Epidemiological Data Science Products. R package version 0.1.1, https://github.com/ukhsa-collaboration/epiviz.","code":"@Manual{,   title = {epiviz: Data Visualisation Functions for Epidemiological Data Science Products},   author = {Harshana Liyanage and Alex Bhattacharya and James Duke and Liam Fitzpatrick and James Leatherland and Jordan Worth and Emma Parker},   year = {2025},   note = {R package version 0.1.1},   url = {https://github.com/ukhsa-collaboration/epiviz}, }"},{"path":"/index.html","id":"epiviz-","dir":"","previous_headings":"","what":"Data Visualisation Functions for Epidemiological Data Science Products","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz provides easy--use data visualisation functions R data science products. package includes functions create range static interactive visualisations. visualisation function can produce either static (ggplot2) dynamic (plotly/leaflet) output using set parameters, allowing users easily switch visualisation types simply changing dynamic flag.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz can installed GitHub using following code:","code":"# Install epiviz remotes::install_github('ukhsa-collaboration/epiviz')  # To install the development version remotes::install_github(\"ukhsa-collaboration/epiviz@dev\")"},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"following visualisation functions available current release epiviz: line_chart(): Creates line charts options grouping, dual axes, threshold lines, confidence limits (ribbons error bars). point_chart(): Creates scatter/point charts options grouping, sizing points values, custom shapes, confidence intervals. col_chart(): Creates column charts options grouping, dual axes, threshold lines, confidence limits (ribbons error bars). epi_curve(): Creates epidemic curves options different time periods, rolling averages, cumulative sums, grouping categories. epi_map(): Creates choropleth maps customisable colour scales, labels, boundaries different administrative levels. age_sex_pyramid(): Creates age-sex pyramids customisable age bands confidence intervals. visualisation functions follow consistent interface:","code":"function_name(   dynamic = FALSE,  # Set to TRUE for interactive plotly/leaflet output   base = NULL,      # Optional base plot to add to   params = list(    # List of parameters controlling the visualisation     df = data,      # Data frame containing the data to visualise     ...             # Function-specific parameters   ),   ...               # Additional arguments passed to underlying plotting functions )"},{"path":"/index.html","id":"key-features","dir":"","previous_headings":"Features","what":"Key Features","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"Consistent Interface: functions use parameter structure, making easy learn use package. Static/Dynamic Flexibility: Switch static (ggplot2) interactive (plotly/leaflet) visualisations changing single parameter. Customisation Options: Extensive parameters customising colours, labels, axes, legends, . Confidence Intervals: Support displaying confidence intervals across different visualisation types. Grouping Support: Easily create grouped visualisations appropriate legends. Dual Axes: Support secondary y-axes applicable chart types. Threshold Lines: Add horizontal reference lines applicable chart types.","code":""},{"path":[]},{"path":"/index.html","id":"llm-interpretation","dir":"","previous_headings":"Experimental Features","what":"LLM Interpretation","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"package includes experimental function llm_interpret() uses Large Language Models (LLMs) automatically interpret epidemiological data visualisations. function can: Generate narrative interpretations data frames Describe analyse ggplot visualisations Provide epidemiologically relevant observations","code":"# Example: Interpret a data frame interpretation <- llm_interpret(   input = summarised_df,   word_limit = 150 )  # Example: Interpret a ggplot visualisation plot <- line_chart(   dynamic = FALSE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\"   ) ) plot_interpretation <- llm_interpret(plot)"},{"path":"/index.html","id":"supported-llm-providers","dir":"","previous_headings":"Experimental Features > LLM Interpretation","what":"Supported LLM Providers","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"function supports multiple LLM providers: OpenAI: Models like gpt-4.1-nano Google Gemini: Models like gemini-2.5-flash-lite Anthropic Claude: Models like claude-sonnet-4-20250514","code":""},{"path":"/index.html","id":"environment-variable-setup","dir":"","previous_headings":"Experimental Features > LLM Interpretation","what":"Environment Variable Setup","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"use llm_interpret() function, need set following environment variables: can set environment variables .Renviron file persistent configuration:","code":"# In your .Renviron file or before calling the function: Sys.setenv(LLM_PROVIDER = \"openai\")  # Choose from: \"openai\", \"gemini\", \"anthropic\" Sys.setenv(LLM_API_KEY = \"your-api-key-here\") Sys.setenv(LLM_MODEL = \"gpt-4.1-nano\")  # Use an appropriate model for your chosen provider # .Renviron file LLM_PROVIDER=openai LLM_API_KEY=your-api-key-here LLM_MODEL=gpt-4.1-nano"},{"path":"/index.html","id":"package-data","dir":"","previous_headings":"","what":"Package data","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"epiviz includes anonymised sample dataset SGSS laboratory database: lab_data() Second Generation Surveillance System (SGSS) data asset held UK Health Security Agency (formerly Public Health England) routinely automatically collects laboratory data across England. Laboratories return data organisms isolated samples organism species, specimen type, sampling date antimicrobial susceptibility testing results. data routinely used public health surveillance epidemiology England.","code":""},{"path":[]},{"path":"/index.html","id":"line-chart","dir":"","previous_headings":"Examples","what":"Line Chart","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"","code":"# Create a static line chart line_chart(   dynamic = FALSE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\",     line_colour = c(\"blue\", \"green\", \"orange\"),     line_type = c(\"solid\", \"dotted\", \"dashed\")   ) )  # Convert to an interactive plotly chart by changing dynamic to TRUE line_chart(   dynamic = TRUE,   params = list(     df = summarised_df,     x = \"specimen_date\",     y = \"count\",     group_var = \"organism_species_name\",     line_colour = c(\"blue\", \"green\", \"orange\"),     line_type = c(\"solid\", \"dotted\", \"dashed\")   ) )"},{"path":"/index.html","id":"age-sex-pyramid","dir":"","previous_headings":"Examples","what":"Age-Sex Pyramid","title":"Data Visualisation Functions for Epidemiological Data Science Products","text":"","code":"# Create a static age-sex pyramid age_sex_pyramid(   dynamic = FALSE,   params = list(     df = lab_data,     var_map = list(       date_of_birth = 'date_of_birth',       sex = 'sex'     ),     grouped = FALSE,     colours = c(\"pink\", \"blue\")   ) )  # Convert to an interactive plotly chart by changing dynamic to TRUE age_sex_pyramid(   dynamic = TRUE,   params = list(     df = lab_data,     var_map = list(       date_of_birth = 'date_of_birth',       sex = 'sex'     ),     grouped = FALSE,     colours = c(\"pink\", \"blue\")   ) )"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 epiviz authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/age_sex_pyramid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an Age-Sex Pyramid — age_sex_pyramid","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"function creates age-sex pyramid visualization, either static ggplot interactive plotly chart. function can take either line list (ungrouped data) already grouped data input. using line list, function processes data, groups age sex, generates pyramid. grouped data provided, directly creates pyramid.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"","code":"age_sex_pyramid(   dynamic = FALSE,   base = NULL,   params = list(df, var_map = list(age_var = \"age\", dob_var = \"date_of_birth\", sex_var =     \"sex\", age_group_var = \"age_group\", value_var = \"value\", ci_lower = \"ci_lower\",     ci_upper = \"ci_upper\"), mf_colours = c(\"#440154\", \"#2196F3\"), x_breaks = 10,     x_axis_title = \"Number of cases\", y_axis_title = \"Age group (years)\", text_size = 12,     ci = NULL, ci_colour = \"red\", age_breakpoints = c(0, 5, 19, 65, Inf),     age_calc_refdate = Sys.Date(), grouped = FALSE, legend_pos = \"top\", chart_title = \"\") )"},{"path":"/reference/age_sex_pyramid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"dynamic Logical. TRUE, function returns interactive plotly chart. FALSE, static ggplot chart returned. base optional base plot add pyramid . Default NULL. params list parameters including: df Data frame containing data used. var_map list mapping variable names data frame expected names used function. age_var Name variable df containing age values. Default 'age'. dob_var Name variable df containing date birth values. Default 'date_of_birth'. sex_var Name variable df containing sex values. Default 'sex'. age_group_var Name variable df containing pre-grouped age groups (grouped = TRUE). value_var Name column containing value counts (grouped = TRUE). ci_lower Name column containing lower confidence limits (ci = TRUE). ci_upper Name column containing upper confidence limits (ci = TRUE). mf_colours vector 2 colours used fill male female bars plot. first colour used males, second females. Default c(\"#440154\", \"#2196F3\"). x_breaks Number breaks x-axis. Default 10. y_axis_title Title y-axis. Default \"Individual count\". x_axis_title Title x-axis. Default \"Number cases\". text_size Size text plot. Default 12. ci Confidence interval. ci = \"errorbar\" confidence intervals plotted bar errorbars. ci = \"errorbar\" grouped = FALSE, default confidence intervals applied using normal approximation Poisson distribution, bounds set \\(\\pm 1.96 \\times \\sqrt{n}\\). ci_colour Colour plotted errorbars ci = TRUE. Default \"red\". age_breakpoints numeric vector specifying breakpoints age groups. Default c(0, 5, 19, 65, Inf). age_calc_refdate Reference date calculating age date birth. Default Sys.Date(). grouped Logical. TRUE, assumes data pre-grouped age sex. FALSE, function processes line list data. Default FALSE. legend_pos Position legend. Default \"top\". chart_title Text use chart title.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"ggplot plotly object representing age-sex pyramid, depending value dynamic.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"grouped = FALSE, function processes line list grouping data age sex, calculating age based either provided age column date birth, generating age-sex pyramid. grouped = TRUE, assumes data already grouped uses provided values directly generate pyramid.","code":""},{"path":"/reference/age_sex_pyramid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an Age-Sex Pyramid — age_sex_pyramid","text":"","code":"if (FALSE) { # \\dontrun{ # Example using a line list df <- epiviz::lab_data age_sex_pyramid(   dynamic = FALSE,   params = list(     df = df,     var_map = list(age_var = 'age', dob_var = 'date_of_birth', sex_var = 'sex'),     grouped = FALSE   ) )  # Example using pre-grouped data grouped_df <- data.frame(   age_group = c(\"0-4\", \"5-18\", \"19-64\", \"65+\"),   sex = c(\"Male\", \"Female\"),   value = c(100, 120, 150, 80),   ci_lower = c(90, 110, 140, 70),   ci_upper = c(110, 130, 160, 90) ) age_sex_pyramid(   dynamic = FALSE,   params = list(     df = grouped_df,     var_map = list(age_group_var = 'age_group', sex_var = 'sex', value = 'value'),     grouped = TRUE   ) ) } # }"},{"path":"/reference/col_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"col_chart — col_chart","title":"col_chart — col_chart","text":"function producing either static (ggplot) dynamic (plotly) column chart.","code":""},{"path":"/reference/col_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"col_chart — col_chart","text":"","code":"col_chart(   dynamic = FALSE,   params = list(df = NULL, x = NULL, y = NULL, x_time_series = FALSE,     x_time_series_bar_labels = FALSE, time_period = \"day\", group_var = NULL,     group_var_barmode = \"stack\", fill_colours = \"lightblue\", bar_border_colour =     \"transparent\", bar_labels = NULL, bar_labels_pos = \"bar_above\", bar_labels_font_size     = 8, bar_labels_font_colour = \"black\", bar_labels_angle = 0, bar_labels_percent =     FALSE, case_boxes = FALSE, case_boxes_colour = \"white\", axis_flip = FALSE, ci = NULL,     ci_upper = NULL, ci_lower = NULL, ci_legend = TRUE,       ci_legend_title =     \"Confidence interval\", ci_colours = \"red\", errorbar_width = NULL, chart_title = NULL,     chart_title_size = 13, chart_title_colour = \"black\", chart_footer = NULL,     chart_footer_size = 12, chart_footer_colour = \"black\", x_axis_title = NULL,     y_axis_title = NULL, x_axis_title_font_size = 11, y_axis_title_font_size = 11,     x_axis_label_angle = NULL, y_axis_label_angle = NULL, x_axis_label_font_size = 9,     y_axis_label_font_size = 9, x_limit_min = NULL, x_limit_max = NULL, y_limit_min =     NULL,       y_limit_max = NULL, x_axis_break_labels = NULL, y_axis_break_labels =     NULL, x_axis_n_breaks = NULL, y_axis_n_breaks = NULL, x_axis_reverse = FALSE,     y_percent = FALSE, show_gridlines = TRUE, show_axislines = TRUE, legend_title = \"\",     legend_pos = \"right\", legend_font_size = 8, legend_title_font_size = 8, hline = NULL,     hline_colour = \"black\", hline_width = 0.5, hline_type = \"dashed\", hline_label = NULL,     hline_label_colour = \"black\", hover_labels = NULL) )"},{"path":"/reference/col_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"col_chart — col_chart","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. params named list containing arguements used create plot. df data frame containing data used create column chart. x character, Name variable df containing values used populate x-axis. y character, Name variable df containing values used populate y-axis.) x_time_series x_time_series = TRUE x-axis data aggregated time series. x must date variable x_time_series = TRUE. granularity time series can set using time_period parameter. y provided, x_time_series assume row corresponds single observation aggregate accordingly. x_time_series_bar_labels x_time_series_bar_labels = TRUE labels equalling y-axis values added bar. time_period time period used along x-axis. Options include c(\"day\",\"year\",\"month\",\"quarter\",\"year_month\",\"year_quarter\",      \"iso_year\",\"iso_week\",\"start_iso_year_week\",\"iso_year_week\"). Default = \"day\" group_var Name variable df used define separate groups within bar, e.g. 'species' 'region'. group_var_barmode Indicates grouped bar data plotted. Options include c(\"group\",\"stack\"). Default = \"stack\". fill_colours Colours used fill bars chart. group_var provided, fill_colours must character containing single colour (default = \"lightblue\"). group_var provided, fill_colours must character vector colours number elements equal number unique groups group_var. named character vector provided names values within group_var, colour mapped corresponding value group_var output chart legend (e.g. c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\", \"STAPHYLOCOCCUS    AUREUS\" = \"#8A1B61\", \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\") setNames(c(\"#007C91\",    \"#8A1B61\",\"#FF7F32\"), c(\"KLEBSIELLA PNEUMONIAE\",\"STAPHYLOCOCCUS AUREUS\",\"PSEUDOMONAS AERUGINOSA\"))) bar_border_colour character, Colour border around bar. Default = \"transparent\", meaning border colour drawn default. bar_labels character, Name variable df containing labels used bar. set bar lables x_time_series = TRUE, set x_time_series_bar_labels = TRUE labels added bar equal y-axis values. bar_labels_pos character, position bars labels plotted, permitted values c('bar_above','bar_base','bar_centre','above_errorbar'). Default = 'bar_above'. bar_labels_font_size numeric, Font size bar labels. Default = 8. bar_labels_font_colour character, Font colour bar labels. Default = 'black'. bar_labels_angle numeric, Font angle bar labels. bar_labels_percent boolean, bar_labels_percent = TRUE values bar_labels converted percentage plotting. case_boxes boolean, case_boxes = TRUE boundary box drawn around case within bar. Defaults case_boxes = FALSE. case_boxes_colour colour border around case box case_boxes =    TRUE. Default = \"white\". axis_flip boolean, set TRUE x y axes flipped bars drawn hozizontally rather vertically. ci Confidence interval. ci = \"errorbar\" confidence intervals plotted bar errorbars. ci provided, ci_upper ci_lower must also provided. ci_upper character, Name variable df used upper confidence limit bar. Mandatory ci provided. ci_lower character, Name variable df used lower confidence limit bar. Mandatory ci provided. ci_legend Logical indicating whether separate legend included chart confidence interval parameters. applies group_var provided. Defaults FALSE. ci_legend_title Text use title separate legend ci_legend = TRUE. Default = \"Confidence interval\". ci_colours Colour(s) used plotting errorbars ci = \"errorbar\". group_var provided, fill_colours must character vector colours number elements equal number unique groups group_var. named character vector provided names values within group_var, colour mapped corresponding value group_var output chart legend (e.g. c(\"KLEBSIELLA PNEUMONIAE\"    = \"#007C91\", \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",\"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\") setNames(c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"), c(\"KLEBSIELLA PNEUMONIAE\",\"STAPHYLOCOCCUS    AUREUS\",\"PSEUDOMONAS AERUGINOSA\"))) errorbar_width Horizontal width plotted error bars ci =    \"errorbar\". chart_title Text use chart title. chart_title_size Font size chart title. Default = 13. chart_title_colour Font colour chart title. Default = \"black\". chart_footer Text use chart footer. chart_footer_size Font size chart footer. Default = 12. chart_footer_colour Font colour chart footer. Default = \"black\". x_axis_title Text used x-axis title. Defaults name x-variable stated. y_axis_title Text used y-axis title. Defaults name y-variable stated. x_axis_title_font_size Font size x-axis title. Default = 11. y_axis_title_font_size Font size y-axis title. Default = 11. x_axis_label_angle Angle x-axis label text. y_axis_label_angle Angle y-axis label text. x_axis_label_font_size Font size x-axis tick labels. Default = 9. y_axis_label_font_size Font size y-axis tick labels. Default = 9. x_limit_min Lower limit x-axis. Default used provided. x_limit_max Upper limit x-axis. Default used provided. y_limit_min Lower limit y-axis. Default used provided. y_limit_max Upper limit y-axis. Default used provided. x_axis_break_labels Vector values use x-axis breaks. Defaults used provided. x_time_series = TRUE Values provided must match formatting time_period. y_axis_break_labels Vector values use y-axis breaks. Defaults used provided. x_axis_n_breaks Scales x-axis approximately n breaks. provided x_axis_break_labels also provided. y_axis_n_breaks Scales y-axis approximately n breaks. used y_axis_break_labels also provided. x_axis_reverse Reverses x-axis scale x_axis_reverse = TRUE. y_percent Converts y-axis percentage scale y_percent = TRUE. show_gridlines Logical show chart gridlines. Default = TRUE. show_axislines Logical show chart axis lines. Default = TRUE. legend_title Text used legend title. legend_pos Position legend. Permitted values = c(\"top\",\"bottom\",\"right\",\"left\") legend_font_size Font size used legend. Default = 8. legend_title_font_size Font size used legend title. Default = 8. hline Adds horizontal line across chart corresponding y-value. Multiple values may provided vector add multiple horizontal lines. hline_colour Colour horizontal lines hline provided. vector colours can provided colour individual hlines multiple hlines provided. Default = \"black\". hline_width Numerical width horizontal lines hline provided. vector numerical widths can provided individual hlines multiple hlines provided. Default = 0.5. hline_type Line style horizontal lines hline provided. vector line styles can provided style hlines multiple hlines provided. Permitted values = c(\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\"). Default = \"dashed\". hline_label Text label horizontal lines hline provided. vector text strings can provided label individual hlines multiple hlines provided. hline_label_colour Colour horizontal line labels hline_labels provided. vector colours can provided colour individual hline_labels multiple hline_labels provided. Default = \"black\". hover_labels string, Text used hover-labels dynamic chart. Accepts html, use '%{x}' reference corresponding x-axis values (.e. date intervals) '%{y}' reference y-axis values, e.g. hover_labels = \"<b>Date:<\/b>    %{x}<br><b>Count:<\/b> %{y}\".","code":""},{"path":"/reference/col_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"col_chart — col_chart","text":"ggplot plotly object.","code":""},{"path":"/reference/col_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"col_chart — col_chart","text":"","code":"if (FALSE) { # \\dontrun{  # Example 1: Basic column chart  # Create a basic column chart using the epiviz::lab_data dataset library(epiviz)  # Summarise the overall number of detections by region in 2023 detections_by_region_2023 <- lab_data |>   filter(specimen_date >= as.Date(\"2023-01-01\") & specimen_date <= as.Date(\"2023-12-31\")) |>   group_by(region) |>   summarise(detections = n()) |>   ungroup() |>   # Place 'Yorkshire and Humber' on multiple lines   mutate(region = ifelse(region == \"Yorkshire and Humber\", \"Yorkshire and \\nHumber\", region))  # Create column chart basic_col_chart <- col_chart(   params = list(     df = detections_by_region_2023,     x = \"region\",     y = \"detections\",     fill_colours = \"#007C91\",     chart_title = \"Laboratory Detections by Region 2023\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -45   ) )  basic_col_chart     # Example 2: Column chart with bar labels, errorbars, and a horizontal threshold line  # Create a basic column chart using the epiviz::lab_data dataset library(epiviz)   # Summarise the overall number of detections by region in 2023 detections_by_region_2023 <- lab_data |>   filter(specimen_date >= as.Date(\"2023-01-01\") & specimen_date <= as.Date(\"2023-12-31\")) |>   group_by(region) |>   summarise(detections = n()) |>   ungroup() |>   # Place 'Yorkshire and Humber' on multiple lines   mutate(region = ifelse(region == \"Yorkshire and Humber\", \"Yorkshire and \\nHumber\", region)) |>   # Add random error for errorbars   rowwise() |>   mutate(lower_limit = detections - sample(50:200,1),          upper_limit = detections + sample(50:200,1)) |>   ungroup()   # Create column chart col_chart <- col_chart(   params = list(     df = detections_by_region_2023,     x = \"region\",     y = \"detections\",     fill_colours = \"#007C91\",     ci = 'errorbar',     ci_lower = \"lower_limit\",     ci_upper = \"upper_limit\",     errorbar_width = 0.2,     bar_labels = 'detections',     bar_labels_pos = 'bar_base',     bar_labels_font_size = 12,     bar_labels_font_colour = 'white',     chart_title = \"Laboratory Detections by Region 2023\",     x_axis_title = \"Region\",     y_axis_title = \"Number of detections\",     show_gridlines = FALSE,     hline = 1200,     hline_colour = 'orange',     hline_label = 'Threshold',     hline_label_colour = 'orange'   ) )  col_chart     # Example 3: Create both static and dynamic column charts using grouped data  library(epiviz)  # Summarise the overall number of detections by species and region in 2023 detections_by_species_region_2023 <- lab_data |>   filter(specimen_date >= as.Date(\"2023-01-01\") & specimen_date <= as.Date(\"2023-12-31\")) |>   group_by(region, organism_species_name) |>   summarise(detections = n()) |>   ungroup() |>   # Place the name for 'Yorkshire and Humber' on multiple lines   mutate(region = ifelse(region == \"Yorkshire and Humber\", \"Yorkshire and \\nHumber\", region))  # Create parameter list params_list <- list(   df = detections_by_species_region_2023,   x = \"region\",   y = \"detections\",   group_var = \"organism_species_name\",   group_var_barmode = \"group\",   fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                    \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                    \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),   chart_title = \"Laboratory Detections by Region \\nand Species 2023\",   chart_footer = \"This chart has been created using simulated data.\",   x_axis_title = \"Region\",   y_axis_title = \"Number of detections\",   chart_title_colour = \"#007C91\",   chart_footer_colour = \"#007C91\",   show_gridlines = FALSE )  # Create static column chart static_chart <- col_chart(params = params_list, dynamic = FALSE)  # Create dynamic epi curve dynamic_chart <- col_chart(params = params_list, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)     # Example 4: Create both static and dynamic column charts using grouped data; apply #              bar labels and present as horizontal column chart.  library(epiviz)  # Summarise the overall number of detections by species and region in 2023 detections_by_species_region_2023 <- lab_data |>   filter(specimen_date >= as.Date(\"2023-01-01\") & specimen_date <= as.Date(\"2023-12-31\")) |>   group_by(region, organism_species_name) |>   summarise(detections = n()) |>   ungroup() |>   # Place the name for 'Yorkshire and Humber' on multiple lines   mutate(region = ifelse(region == \"Yorkshire and Humber\", \"Yorkshire and \\nHumber\", region))   # Reorder dataframe so that regions with the largest total number of detections will #    appear at the top. detections_by_species_region_2023 <- detections_by_species_region_2023 |>   group_by(region) |>   mutate(group_detections = sum(detections)) |>   ungroup() |>   arrange(group_detections) |>   mutate(region = factor(region, levels = unique(region)))   # Create parameter list params_list <- list(   df = detections_by_species_region_2023,   x = \"region\",   y = \"detections\",   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                    \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                    \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),   bar_labels = 'detections',   bar_labels_pos = 'bar_centre',   bar_labels_font_size = 8,   bar_labels_font_colour = 'white',   chart_title = \"Laboratory Detections by Region \\nand Species 2023\",   chart_footer = \"This chart has been created using simulated data.\",   x_axis_title = \"Region\",   y_axis_title = \"Number of detections\",   chart_title_colour = \"#007C91\",   chart_footer_colour = \"#007C91\",   show_gridlines = FALSE,   axis_flip = TRUE  # Create horizontal chart using the axis_flip parameter )   # Create static and dynamic column charts static_chart <- col_chart(params = params_list, dynamic = FALSE) dynamic_chart <- col_chart(params = params_list, dynamic = TRUE)   # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)    # Example 5: Create both static and dynamic column charts using a time-series x-axis #              and a percentage y-axis.  library(epiviz)  # Create parameter list params_list <- list(   df = lab_data,   x = \"specimen_date\",   x_limit_min = \"2022-12-01\",   x_limit_max = \"2023-03-31\",   # Set x_time_series = TRUE and time_period = \"iso_year_week\" to aggregate data   #   into a time series by ISO week (assumes each row in df corresponds to a   #   single observation).   x_time_series = TRUE,   time_period = \"iso_year_week\",   x_time_series_bar_labels = TRUE,   # Set y_percent = TRUE to convert y-axis to percentage scale (when x_time_series   #   = TRUE this will also convert y values and bar labels to percentages by group).   y_percent = TRUE,   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                    \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                    \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),   bar_labels_pos = 'bar_centre',   bar_labels_font_size = 8,   bar_labels_font_colour = 'white',   chart_title = \"Laboratory Detections by ISO week \\nand Species, winter 2022-23\",   chart_footer = \"This chart has been created using simulated data.\",   x_axis_title = \"ISO Week\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -45,   chart_title_colour = \"#007C91\",   chart_footer_colour = \"#007C91\",   show_gridlines = FALSE )   # Create static and dynamic column charts static_chart <- col_chart(params = params_list, dynamic = FALSE) dynamic_chart <- col_chart(params = params_list, dynamic = TRUE)   # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)   } # }"},{"path":"/reference/epiviz-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epiviz: Data Visualisation Functions for Epidemiological Data Science Products — epiviz-package","title":"epiviz: Data Visualisation Functions for Epidemiological Data Science Products — epiviz-package","text":"epiviz package provides set functions produce frequently used static interactive graphs epidemiological data science products.","code":""},{"path":[]},{"path":"/reference/epiviz-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epiviz: Data Visualisation Functions for Epidemiological Data Science Products — epiviz-package","text":"Maintainer: Harshana Liyanage harshana.liyanage@ukhsa.gov.uk (ORCID) Authors: Alex Bhattacharya alex.bhattacharya@ukhsa.gov.uk (ORCID) James Duke james.duke@ukhsa.gov.uk Liam Fitzpatrick liam.fitzpatrick@ukhsa.gov.uk James Leatherland james.leatherland@ukhsa.gov.uk Jordan Worth jordan.worth@ukhsa.gov.uk Emma Parker emma.k.parker@ukhsa.gov.uk","code":""},{"path":"/reference/epi_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"epi_curve — epi_curve","title":"epi_curve — epi_curve","text":"function producing either static (ggplot) dynamic (plotly) epidemic curve.","code":""},{"path":"/reference/epi_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epi_curve — epi_curve","text":"","code":"epi_curve(   dynamic = FALSE,   params = list(df = NULL, y = NULL, date_var = NULL, date_start = NULL, date_end = NULL,     time_period = \"day\", group_var = NULL, group_var_barmode = \"stack\", fill_colours =     \"lightblue\", bar_border_colour = \"transparent\", case_boxes = FALSE, case_boxes_colour     = \"white\", rolling_average_line = FALSE, rolling_average_line_lookback = 7,     rolling_average_line_colour = \"red\", rolling_average_line_width = 1,     rolling_average_line_legend_label = \"Rolling average\", cumulative_sum_line = FALSE,     cumulative_sum_line_colour = \"darkblue\",       cumulative_sum_line_width = 1,     cumulative_sum_line_legend_label = \"Cumulative sum\", cumulative_sum_line_axis_title =     \"Cumulative Sum\", chart_title = NULL, chart_title_size = 13, chart_title_colour =     \"black\", chart_footer = NULL, chart_footer_size = 12, chart_footer_colour = \"black\",     x_axis_title = NULL, y_axis_title = NULL, x_axis_title_font_size = 11,     y_axis_title_font_size = 11, x_axis_label_angle = NULL, y_axis_label_angle = NULL,     x_axis_label_font_size = 9, y_axis_label_font_size = 9, y_limit_min = NULL,           y_limit_max = NULL, x_axis_break_labels = NULL, y_axis_break_labels = NULL,     y_axis_n_breaks = NULL, show_gridlines = FALSE, show_axislines = TRUE, legend_title =     \"\", legend_pos = \"right\", legend_font_size = 8, legend_title_font_size = 8, hline =     NULL, hline_colour = \"black\", hline_width = 0.5, hline_type = \"dashed\", hline_label =     NULL, hline_label_colour = \"black\", hover_labels = NULL) )"},{"path":"/reference/epi_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epi_curve — epi_curve","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. params named list containing arguments used create plot. df data frame containing data used create epi curve. date_var character, Name variable df containing dates used populate x-axis. y data pre-aggregated, name variable df containing aggregated values (.e. values used populate y-axis.) date_start date determine minimum value along x-axis. rows date_var < date_start excluded aggregates. date_end date determine maximum value along x-axis. rows date_var > date_end excluded aggregates. time_period time period used along x-axis. Options include c(\"day\",\"year\",\"month\",\"quarter\",\"year_month\",\"year_quarter\",      \"iso_year\",\"iso_week\",\"start_iso_year_week\",\"iso_year_week\"). Default = \"day\" group_var Name variable df used define separate groups within bar, e.g. species region. group_var_barmode Indicates grouped bar data plotted. Options include c(\"group\",\"stack\"). Default = \"stack\". fill_colours Colours used fill bars chart. group_var provided, fill_colours must character containing single colour (default = \"lightblue\"). group_var provided, fill_colours must character vector colours number elements equal number unique groups group_var. named character vector provided names values within group_var, colour mapped corresponding value group_var output chart legend (e.g. c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\", \"STAPHYLOCOCCUS    AUREUS\" = \"#8A1B61\", \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\") setNames(c(\"#007C91\",    \"#8A1B61\",\"#FF7F32\"), c(\"KLEBSIELLA PNEUMONIAE\",\"STAPHYLOCOCCUS AUREUS\",\"PSEUDOMONAS AERUGINOSA\"))) bar_border_colour Colour border around bar. border colour drawn default. case_boxes boolean, case_boxes = TRUE boundary box drawn around case within bar. Defaults case_boxes = FALSE. case_boxes_colour colour border around case box case_boxes =    TRUE. Default = \"white\". rolling_average_line boolean, rolling_average_line = TRUE, line showing rolling mean added plot. Default = FALSE. rolling_average_line_lookback Integer denoting lookback window across rolling mean calculated (including current time interval). integer denotes division within time_period, e.g. time_period = \"year_month\" rolling_average_line_lookback = 3 rolling mean calculated using values current month previous 2 months, time_period = \"day\" rolling_average_line_lookback = 7 rolling mean calculated using values previous 7 days including current day. less values within lookback window rolling_average_line_lookback, mean calculated incomplete window using values available (.e. rolling_average_line_lookback = 7 time_period = \"day\" 4 values within previous 7 days, rolling mean calculated 4 available values.) rolling_average_line_colour character Colour rolling average line. Default = \"red\". rolling_average_line_width numeric Width rolling average line. Default = 1. rolling_average_line_legend_label character Label used rolling average line chart legend. cumulative_sum_line boolean, cumulative_sum_line_line = TRUE, line showing cumulative sum added plot. Default = FALSE. Values cumulative sum plotted secondary y-axis. cumulative_sum_line_colour character Colour cumulative line. Default = \"darkblue\". cumulative_sum_line_width numeric Width cumulative sum line. Default = 1. cumulative_sum_line_legend_label character Label used cumulative sum line chart legend. cumulative_sum_line_axis_title character Axis title cumulative sum line secondary axis. chart_title Text use chart title. chart_title_size Font size chart title. chart_title_colour Font colour chart title. chart_footer Text use chart footer. chart_footer_size Font size chart footer. chart_footer_colour Font colour chart footer. x_axis_title Text used x-axis title. Defaults name x-variable stated. y_axis_title Text used y-axis title. Defaults name y-variable stated. x_axis_title_font_size Font size x-axis title. y_axis_title_font_size Font size y-axis title. x_axis_label_angle Angle x-axis label text. y_axis_label_angle Angle y-axis label text. x_axis_label_font_size Font size x-axis tick labels. y_axis_label_font_size Font size y-axis tick labels. y_limit_min Lower limit y-axis. Default used provided. y_limit_max Upper limit y-axis. Default used provided. x_axis_break_labels Vector values use x-axis breaks. Defaults used provided. Values provided must match formatting time_period. y_axis_break_labels Vector values use y-axis breaks. Defaults used provided. y_axis_n_breaks Scales y-axis approximately n breaks. used y_axis_break_labels also provided. show_gridlines Logical show chart gridlines. Default = FALSE. show_axislines Logical show chart axis lines. Default = TRUE. legend_title Text used legend title. legend_pos Position legend. Permitted values = c(\"top\",\"bottom\",\"right\",\"left\") legend_font_size Font size used legend. legend_title_font_size Font size used legend title. hline Adds horizontal line across chart corresponding y-value. Multiple values may provided vector add multiple horizontal lines. hline_colour Colour horizontal lines hline provided. vector colours can provided colour individual hlines multiple hlines provided. hline_width Numerical width horizontal lines hline provided. vector numerical widths can provided individual hlines multiple hlines provided. hline_type Line style horizontal lines hline provided. vector line styles can provided style hlines multiple hlines provided. Permitted values = c(\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\"). hline_label Text label horizontal lines hline provided. vector text strings can provided label individual hlines multiple hlines provided. hline_label_colour Colour horizontal line labels hline_labels provided. vector colours can provided colour individual hline_labels multiple hline_labels provided. hover_labels string, Text used hover-labels dynamic chart. Accepts html, use '%{x}' reference corresponding x-axis values (.e. date intervals) '%{y}' reference y-axis values, e.g. hover_labels = \"<b>Date:<\/b>    %{x}<br><b>Count:<\/b> %{y}\".","code":""},{"path":"/reference/epi_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epi_curve — epi_curve","text":"ggplot plotly object.","code":""},{"path":"/reference/epi_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epi_curve — epi_curve","text":"","code":"if (FALSE) { # \\dontrun{  # Example 1: Basic epi curve  # Create a basic epi curve using the epiviz::lab_data dataset library(epiviz)  basic_epi_curve <- epi_curve(   params = list(     df = lab_data,     date_var = \"specimen_date\",     date_start = \"2020-01-01\",     date_end = \"2023-12-31\",     time_period = \"year_month\",     fill_colours = \"#007C91\",     rolling_average_line = TRUE,     rolling_average_line_lookback = 3,     rolling_average_line_legend_label = \"3-month rolling average\",     chart_title = \"Laboratory Detections per Month\",     x_axis_title = \"Year - Month\",     y_axis_title = \"Number of detections\",     x_axis_label_angle = -90   ) )  basic_epi_curve     # Example 2: Create both static and dynamic epi curves using grouped data  library(epiviz)  # Define list of date breaks for x-axis; use every other ISO week in date range week_seq <- seq(as.Date(\"2021-01-01\"),as.Date(\"2022-05-31\"), by = '2 week') week_breaks <- paste0(lubridate::isoyear(week_seq),'-W',lubridate::isoweek(week_seq))  # Create parameter list params_list <- list(   df = lab_data,   date_var = \"specimen_date\",   date_start = \"2021-01-01\",   date_end = \"2022-05-31\",   time_period = \"iso_year_week\",   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"KLEBSIELLA PNEUMONIAE\" = \"#007C91\",                    \"STAPHYLOCOCCUS AUREUS\" = \"#8A1B61\",                    \"PSEUDOMONAS AERUGINOSA\" = \"#FF7F32\"),   rolling_average_line = TRUE,   rolling_average_line_legend_label = \"7-week rolling average\",   chart_title = \"Laboratory detections by species \\n 2021-01 - 2022-05\",   chart_footer = \"This chart has been created using simulated data.\",   x_axis_title = \"Year - ISO Week\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   x_axis_break_labels = week_breaks,   y_axis_break_labels = seq(0, 250, 20),   chart_title_colour = \"#007C91\",   chart_footer_colour = \"#007C91\" )  # Create static epi curve static_curve <- epi_curve(params = params_list, dynamic = FALSE)  # Create dynamic epi curve dynamic_curve <- epi_curve(params = params_list, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)     # Example 3: Create static and dynamic curves using grouped data, include cumulative # sum line and boxes around each case  library(epiviz)  # Create parameter list params_cases <- list(   df = lab_data,   date_var = \"specimen_date\",   date_start = \"2021-06-01\",   date_end = \"2021-07-31\",   time_period = \"day\",   group_var = \"organism_species_name\",   group_var_barmode = \"stack\",   fill_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   case_boxes = TRUE,   rolling_average_line = TRUE,   rolling_average_line_legend_label = \"7-day rolling average\",   cumulative_sum_line = TRUE,   chart_title = \"Laboratory detections by species \\n June - July 2021\",   chart_title_colour = \"#007C91\",   hline = c(35),   hline_label = \"Threshold\",   hline_width = 0.5,   hline_colour = \"orange\",   hline_label_colour = \"orange\",   hline_type = \"dotdash\",   legend_title = \"Detected organisms\",   legend_pos = \"right\",   y_limit_max = 40,   x_axis_break_labels = as.character(seq(as.Date(\"2021-06-01\"),                                          as.Date(\"2021-07-31\"),                                          by = '2 days')),   y_axis_break_labels = seq(0, 40, 5),   x_axis_title = \"Date\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   y_axis_label_angle = 90 )   # Create static and dynamic curves static_curve <- epi_curve(params = params_cases, dynamic = FALSE) dynamic_curve <- epi_curve(params = params_cases, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)     # Example 4: Create static and dynamic curves using pre-aggregated data  library(epiviz)  # Define a dataframe containing the number of detections by region regional_detections <- lab_data |>   group_by(specimen_date, region) |>   summarise(detections = n()) |>   ungroup()   # Create parameter list params_regions <- list(   df = regional_detections,   y = \"detections\",   date_var = \"specimen_date\",   date_start = \"2021-10-01\",   date_end = \"2022-03-31\",   time_period = \"iso_year_week\",   group_var = \"region\",   group_var_barmode = \"stack\",   rolling_average_line = TRUE,   rolling_average_line_lookback = 3,   rolling_average_line_legend_label = \"3-week rolling average\",   rolling_average_line_colour = \"#007C91\",   rolling_average_line_width = 1.5,   cumulative_sum_line = TRUE,   cumulative_sum_line_colour = \"orange\",   chart_title = \"Laboratory Detections by Region \\nWinter 2021-22\",   chart_title_colour = \"#007C91\",   legend_title = \"Region\",   legend_pos = \"right\",   y_axis_break_labels = seq(0, 300, 50),   x_axis_title = \"ISO Week\",   y_axis_title = \"Number of detections\",   x_axis_label_angle = -90,   hover_labels = \"<b>Week:<\/b> %{x}<br><b>Count:<\/b> %{y}\" )   # Create static and dynamic curves static_curve <- epi_curve(params = params_regions, dynamic = FALSE) dynamic_curve <- epi_curve(params = params_regions, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_curve'),   plotlyOutput('dynamic_curve') ) server <- function(input, output, session) {   output$static_curve <- renderPlot(static_curve)   output$dynamic_curve <- renderPlotly(dynamic_curve) } shinyApp(ui, server)   } # }"},{"path":"/reference/epi_map.html","id":null,"dir":"Reference","previous_headings":"","what":"epi_map — epi_map","title":"epi_map — epi_map","text":"function producing either static (ggplot) dynamic (leaflet) choropleth maps.","code":""},{"path":"/reference/epi_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epi_map — epi_map","text":"","code":"epi_map(   dynamic = FALSE,   params = list(df = NULL, value_col = NULL, data_areacode = NULL, inc_shp = TRUE,     shp_name = NULL, shp_areacode = NULL, fill_palette = \"Blues\", fill_opacity = 1,     break_intervals = NULL, break_labels = NULL, force_cat = TRUE, n_breaks = NULL,     labels = NULL, map_title = \"\", map_title_size = 13, map_title_colour = \"black\",     map_footer = \"\", map_footer_size = 12, map_footer_colour = \"black\", area_labels =     FALSE, area_labels_topn = NULL, legend_title = \"\", legend_pos = \"topright\", map_zoom     = NULL, border_shape_name = NULL,       border_code_col = NULL, border_areaname =     NULL) )"},{"path":"/reference/epi_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epi_map — epi_map","text":"dynamic Logical indicating whether produce dynamic (leaflet) output. Default FALSE, return static ggplot output. params named list containing arguements used map. df Data frame containing values used fill areas output map. Can include pre-merged shapefile data inc_shp = TRUE. value_col Name variable df used fill map areas. data_areacode Name variable df containing name code map areas plotted. (Mandatory shp_name argument passed). inc_shp boolean parameter indicate whether df already includes shapefile data. shp_name Data frame name filepath shapefile containing spatial information resultant map output. used inc_shp = TRUE. shp_areacode Name variable shp_name containing name code map areas plotted. (Mandatory shp_name argument passed). fill_palette Colour palette used fill map areas. Can provided either name RColorBrewer palette (e.g. fill_palette = \"YlOrRd\"), character containing single rgb colour code, hexcode, colour name used generate colour range (e.g. fill_palette = \"#007C91\"), character vector containing multiple rgb codes, hexcodes, colour names used generate colour range (e.g. c(\"#007C91\",\"purple\",\"red\")). Defaults RColorBrewer \"Blues\" palette.) fill_opacity numeric value 0 1 determine map fill-color opacity. break_intervals numeric vector interval points legend (Mandatory break_labels argument passed, break_intervals break_labels must equal length). break_labels vector labels include legend. (Mandatory break_labels argument passed, break_intervals break_labels must equal length). force_cat boolean parameter determine whether arguments passed break_labels used legend, even values present data. n_breaks Number break intervals. argument alternative supplying defined breaks via break_labels, provide number evenly distributed breaks specified (default = 5). break_labels argument passed, n_breaks ignored. labels name string variable df containing labels map area. dynamic = FALSE, labels positioned centre map area. dynamic = TRUE, labels appear hover-labels. dynamic = TRUE, labels can include HTML. map_title string determine map title. map_title_size font size map title. map_title_colour string determine map title colour. map_footer_size font size map footer. map_footer_colour string determine map title colour. area_labels boolean parameter add data_areacode static area labels map areas. dynamic = FALSE labels parameter alredy supplied, area_labels ignored. area_labels_topn numeric value display area_labels areas top n values value_col (e.g. area_labels_topn = 5, area_labels map areas top 5 values value_col displayed). legend_title string determine legend title. legend_pos string determine legend position. dynamic = TRUE, ggplot leaflet permissable legend positions can provided. dynamic = FALSE, leaflet permissable legend positions can provided (.e.\"topright\", \"bottomright\", \"bottomleft\", \"topleft\"). map_zoom single row data frame variables 'LAT', 'LONG', 'zoom' allows map zoomed specific region (e.g. data.frame(LONG = -2.547855, LAT = 53.00366, zoom = 6)). LAT = numerical latitude coordinate centre point zoom, LONG = numerical longitude coordinate centre point zoom, zoom = numerical value represent depth zoom. border_shape_name Optional filepath shapefile containing additional borders include output map. higher geography base map (e.g. creating map displaying UTLAs, shapefile containing regional boundaries higher used). boundaries contained within border_shape_name used, areas unfilled. border_code_col Variable name area code / name within border_shape_name. Required specific area within border shapefile required. border_areaname Character vector containing name specific areas within border_code_col plotted. supplied, boundaries included border_areaname plotted. supplied, boundaries areas within border_shape_name plotted.","code":""},{"path":"/reference/epi_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epi_map — epi_map","text":"ggplot leaflet object.","code":""},{"path":"/reference/epi_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"epi_map — epi_map","text":"","code":"if (FALSE) { # \\dontrun{  # Example 1: Create a static map of Staphylococcus Aureus detections in London # Local Authority Districts.  # Define values for choropleth map using lab_data dataset London_staph_detections <- lab_data |>   filter(region == \"London\", organism_species_name == \"STAPHYLOCOCCUS AUREUS\") |>   group_by(local_authority_name) |>   summarise(detections = n())  # Create static map using London_LA_boundaries_2023 data London_staph_detections_map <- epi_map(   params = list(     df = London_staph_detections,     value_col = \"detections\",     data_areacode = \"local_authority_name\",     inc_shp = FALSE,     area_labels = TRUE,     shp_name = London_LA_boundaries_2023,     shp_areacode = \"LAD23NM\",     map_title = \"Staphylococcus Aureus detections in London Local Authority Districts\",     map_zoom = data.frame(LONG = c(-0.12776), LAT = c(51.50735), zoom = c(8.7)),     legend_title = \"Number of \\nDetections\",     legend_pos = \"right\") )    # Example 2: Create a static map of Klebsiella Pneumoniae detections in England # public health regions using data pre-merged with a shapefile.  # Define values for choropleth map using the lab_data dataset kleb_pneu_detections <- lab_data |>   filter(organism_species_name == \"KLEBSIELLA PNEUMONIAE\") |>   group_by(region) |>   summarise(detections = n()) |>   ungroup()  # Add column defining labels to apply to map areas kleb_pneu_detections <- kleb_pneu_detections |>   mutate(map_labels = paste0(region,\": \\n\",detections))  # Join with the PHEC_boundaries_2016 shapefile data kleb_pneu_detections_shp <- left_join(x = PHEC_boundaries_2016, y = kleb_pneu_detections,                                       by = c(\"phec16nm\" = \"region\"))  # Define parameter list for map function kleb_pneu_params <- list(   df = kleb_pneu_detections_shp,   value_col = \"detections\",   data_areacode = \"phec16nm\",   inc_shp = TRUE,   fill_palette = \"YlOrRd\",   fill_opacity = 0.7,   labels = \"map_labels\",   map_title = \"Number of Klebsiella Pneumoniae detections \\nin UK public health regions\",   map_title_size = 12,   map_title_colour = \"orangered\",   map_footer = \"Map represents simulated test data only.\",   map_footer_size = 10,   map_footer_colour = \"black\",   legend_title = \"Number of \\nDetections\",   legend_pos = \"topright\",   break_labels = c(\"0-499\",\"500-999\",\"1000-1499\",\"1500-1999\",\"2000-2499\",\"2500+\"),   break_intervals = c(0,500,1000,1500,2000,2500),   force_cat = TRUE )  # Create map kleb_pneu_detections_map <- epi_map(dynamic = FALSE, params = kleb_pneu_params)    # Example 3: Refactor the above map as dynamic map, only add area_labels for # the top 5 areas by number of detections, and add an additional border using # the UK_boundaries_2023 shapefile data.  # Create list of additional parameters kleb_pneu_params_add <- list(   area_labels = TRUE,   area_labels_topn = 5,   map_zoom = data.frame(LONG = c(-2.89479), LAT = c(54.793409), zoom = c(5)),   border_shape_name = UK_boundaries_2023 )  # Combine existing parameters list with additional parameters list kleb_pneu_params_dyn <- c(kleb_pneu_params, kleb_pneu_params_add)  # Create map kleb_pneu_map_dynamic <- epi_map(dynamic = TRUE, params = kleb_pneu_params_dyn)  } # }"},{"path":"/reference/lab_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic Lab Data for EpiViz functions — lab_data","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"dataset containing synthetic lab data epidemiological visualisation purposes.","code":""},{"path":"/reference/lab_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"","code":"data(lab_data)"},{"path":"/reference/lab_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"data frame following columns: date_of_birth Date birth patients. sex Gender patients (Factor levels: \"Female\", \"Male\"). organism_species_name Organism species name (Factor levels: \"KLEBSIELLA PNEUMONIAE\"). specimen_date Date specimen collection. lab_code Laboratory codes (Factor unique levels). local_authority_name Name local authority. local_authority_code Code local authority. region Name UKHSA regions.","code":""},{"path":"/reference/lab_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic Lab Data for EpiViz functions — lab_data","text":"","code":"data(lab_data) head(lab_data) #>   date_of_birth    sex organism_species_name specimen_date lab_code #> 1    1938-10-05 Female KLEBSIELLA PNEUMONIAE    2020-05-24  BI20985 #> 2    1957-04-04   Male KLEBSIELLA PNEUMONIAE    2023-07-08  JH70033 #> 3    1927-06-24   Male STAPHYLOCOCCUS AUREUS    2023-02-24   CU5997 #> 4    1962-06-14   Male STAPHYLOCOCCUS AUREUS    2023-08-26   ES3851 #> 5    1953-07-20   Male STAPHYLOCOCCUS AUREUS    2022-04-07  YA29556 #> 6    1968-01-25   Male KLEBSIELLA PNEUMONIAE    2020-08-20  QF11124 #>        local_authority_name local_authority_code     region #> 1                  Worthing            E07000229 South East #> 2                   Reading            E06000038 South East #> 3                  Plymouth            E06000026 South West #> 4 Cheshire West and Chester            E06000050 North West #> 5            Northumberland            E06000057 North East #> 6                  Rochdale            E08000005 North West"},{"path":"/reference/line_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"function generates line chart data frame using specified x y variables. Optionally, plot can rendered interactive Plotly object. function also allows grouping data based specified grouping variable.","code":""},{"path":"/reference/line_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"","code":"line_chart(   dynamic = FALSE,   base = NULL,   params = list(df, x, y, ci = NULL, lower = NULL, upper = NULL, error_colour =     c(\"#f2c75c\"), group_var, line_colour = c(\"blue\"), line_type = \"solid\", width = 1,     title = NULL, x_label = NULL, x_label_angle = NULL, y_label = NULL, y_label_angle =     NULL, y_percent = FALSE, st_theme = NULL, add_points = FALSE, show_gridlines = FALSE,     show_axislines = TRUE, legend_title = NULL, legend_position = NULL, hline = NULL,     hline_colour = \"red\", hline_label = NULL),   ... )"},{"path":"/reference/line_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"dynamic logical value. TRUE, line chart rendered Plotly object interactivity. FALSE, static ggplot2 object returned. base base plotly ggplot2 object add line chart . Default NULL. params list containing following elements: df data frame containing data plotted. x character string specifying name column df used x-axis. y character string specifying name column df used y-axis. group_var character string specifying name column df used grouping data. ci Optional. character string specifying column df confidence intervals. lower Optional. character string specifying column df lower bounds confidence intervals. upper Optional. character string specifying column df upper bounds confidence intervals. error_colour color error bars. Default #f2c75c. line_colour List colours lines. Default blue. line_type Line type single graph, list line types Permissable values: \"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\" width numeric value specifying width lines. title Optional. character string specifying title plot. x_label Optional. character string specifying label x-axis. x_label_angle Optional. numeric value specifying rotation angle x-axis labels. y_label Optional. character string specifying label y-axis. y_label_angle Optional. numeric value specifying rotation angle y-axis labels. y_percent Optional. logical value. TRUE, y-axis scaled percentages. st_theme Optional. ggplot2 theme object customize style plot. add_points Optional. logical value. TRUE, points added line chart. ... Additional arguments passed geom_line static (ggplot2) plots plot_ly/add_trace dynamic (Plotly) plots, allowing custom styling lines (e.g., alpha, size, marker, etc.).","code":""},{"path":"/reference/line_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"plotly ggplot2 object representing line chart.","code":""},{"path":"/reference/line_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function for producing either static (ggplot) or dynamic (plotly) line charts. — line_chart","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(epiviz)  # Import df lab_data from epiviz and do some manipulation before passing for the test test_df <- epiviz::lab_data  # Manipulating date within df test_df$specimen_date <- as.Date(test_df$specimen_date)  # Setting start date and end date for aggregation start_date <- as.Date(\"2023-01-01\") end_date <- as.Date(\"2023-12-31\")  # Summarization summarised_df <- test_df |>   group_by(organism_species_name, specimen_date) |>   summarize(count = n(), .groups = 'drop') |>   ungroup() |>   filter(specimen_date >= start_date & specimen_date <= end_date)  # Ensure that summarised_df is a data frame summarised_df <- as.data.frame(summarised_df)   # Create params list  params <- list(    df = summarised_df,  # Ensure this is correctly referencing the data frame    x = \"specimen_date\", # Ensure this matches the column name exactly    y = \"count\",         # Ensure this matches the column name exactly    group_var = \"organism_species_name\",  # Ensure this matches the column name exactly    line_colour = c(\"blue\",\"green\",\"orange\"),    line_type = c(\"solid\", \"dotted\", \"dashed\")  )  # Generate the line chart line_chart(params = params, dynamic = FALSE)   # Generate the line chart result <- epiviz::line_chart(params = params, dynamic = FALSE)   # Import df lab_data from epiviz and do some manipulation before passing for the test  test_df <- epiviz::lab_data   # Manipulating date within df  test_df$specimen_date <- as.Date(test_df$specimen_date)   # Setting start date and end date for aggregation  start_date <- as.Date(\"2023-01-01\")  end_date <- as.Date(\"2023-12-31\")   # Summarization  summarised_df <- test_df |>    group_by(organism_species_name, specimen_date) |>    summarize(count = n(), .groups = 'drop') |>    ungroup() |>    filter(specimen_date >= start_date & specimen_date <= end_date)   # Ensure that summarised_df is a data frame  summarised_df <- as.data.frame(summarised_df)   # Create params list  params <- list(    df = summarised_df,  # Ensure this is correctly referencing the data frame    x = \"specimen_date\", # Ensure this matches the column name exactly    y = \"count\",         # Ensure this matches the column name exactly    group_var = \"organism_species_name\",  # Ensure this matches the column name exactly    line_colour = c(\"blue\",\"green\",\"orange\"),    line_type = c(\"solid\", \"dotted\", \"dashed\")  )   # Generate the line chart  epiviz::line_chart(params = params, dynamic = TRUE)  {\"x\":{\"visdat\":{\"17ae4235c6238\":[\"function () \",\"plotlyVisDat\"],\"17ae4266835fa\":[\"function () \",\"data\"],\"17ae4179013da\":[\"function () \",\"data\"],\"17ae46075bd4\":[\"function () \",\"data\"]},\"cur_data\":\"17ae46075bd4\",\"attrs\":{\"17ae4266835fa\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"KLEBSIELLA PNEUMONIAE\",\"line\":{\"color\":\"blue\",\"dash\":\"solid\",\"width\":1},\"inherit\":true},\"17ae4179013da\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"PSEUDOMONAS AERUGINOSA\",\"line\":{\"color\":\"green\",\"dash\":\"dot\",\"width\":1},\"inherit\":true},\"17ae46075bd4\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"STAPHYLOCOCCUS AUREUS\",\"line\":{\"color\":\"orange\",\"dash\":\"dash\",\"width\":1},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"specimen_date\",\"showgrid\":false,\"showline\":true},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"count\",\"showgrid\":false,\"showline\":true,\"zeroline\":false},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"2023-01-01\",\"2023-01-02\",\"2023-01-03\",\"2023-01-04\",\"2023-01-05\",\"2023-01-06\",\"2023-01-07\",\"2023-01-08\",\"2023-01-09\",\"2023-01-10\",\"2023-01-11\",\"2023-01-12\",\"2023-01-13\",\"2023-01-14\",\"2023-01-15\",\"2023-01-16\",\"2023-01-17\",\"2023-01-18\",\"2023-01-19\",\"2023-01-20\",\"2023-01-21\",\"2023-01-22\",\"2023-01-23\",\"2023-01-24\",\"2023-01-25\",\"2023-01-26\",\"2023-01-27\",\"2023-01-28\",\"2023-01-29\",\"2023-01-30\",\"2023-01-31\",\"2023-02-01\",\"2023-02-02\",\"2023-02-03\",\"2023-02-04\",\"2023-02-05\",\"2023-02-06\",\"2023-02-07\",\"2023-02-08\",\"2023-02-09\",\"2023-02-10\",\"2023-02-11\",\"2023-02-12\",\"2023-02-13\",\"2023-02-14\",\"2023-02-15\",\"2023-02-16\",\"2023-02-17\",\"2023-02-18\",\"2023-02-19\",\"2023-02-20\",\"2023-02-21\",\"2023-02-22\",\"2023-02-23\",\"2023-02-24\",\"2023-02-25\",\"2023-02-26\",\"2023-02-27\",\"2023-02-28\",\"2023-03-01\",\"2023-03-02\",\"2023-03-03\",\"2023-03-04\",\"2023-03-05\",\"2023-03-06\",\"2023-03-07\",\"2023-03-08\",\"2023-03-09\",\"2023-03-10\",\"2023-03-11\",\"2023-03-12\",\"2023-03-13\",\"2023-03-14\",\"2023-03-15\",\"2023-03-16\",\"2023-03-17\",\"2023-03-18\",\"2023-03-19\",\"2023-03-20\",\"2023-03-21\",\"2023-03-22\",\"2023-03-23\",\"2023-03-24\",\"2023-03-25\",\"2023-03-26\",\"2023-03-27\",\"2023-03-28\",\"2023-03-29\",\"2023-03-30\",\"2023-03-31\",\"2023-04-01\",\"2023-04-02\",\"2023-04-03\",\"2023-04-04\",\"2023-04-05\",\"2023-04-06\",\"2023-04-07\",\"2023-04-08\",\"2023-04-09\",\"2023-04-10\",\"2023-04-11\",\"2023-04-12\",\"2023-04-13\",\"2023-04-14\",\"2023-04-15\",\"2023-04-16\",\"2023-04-17\",\"2023-04-18\",\"2023-04-19\",\"2023-04-20\",\"2023-04-21\",\"2023-04-22\",\"2023-04-23\",\"2023-04-24\",\"2023-04-25\",\"2023-04-26\",\"2023-04-27\",\"2023-04-28\",\"2023-04-29\",\"2023-04-30\",\"2023-05-01\",\"2023-05-02\",\"2023-05-03\",\"2023-05-04\",\"2023-05-05\",\"2023-05-06\",\"2023-05-07\",\"2023-05-08\",\"2023-05-09\",\"2023-05-10\",\"2023-05-11\",\"2023-05-12\",\"2023-05-13\",\"2023-05-14\",\"2023-05-15\",\"2023-05-16\",\"2023-05-17\",\"2023-05-18\",\"2023-05-19\",\"2023-05-20\",\"2023-05-21\",\"2023-05-22\",\"2023-05-23\",\"2023-05-24\",\"2023-05-25\",\"2023-05-26\",\"2023-05-27\",\"2023-05-28\",\"2023-05-29\",\"2023-05-30\",\"2023-05-31\",\"2023-06-01\",\"2023-06-02\",\"2023-06-03\",\"2023-06-04\",\"2023-06-05\",\"2023-06-06\",\"2023-06-07\",\"2023-06-08\",\"2023-06-09\",\"2023-06-10\",\"2023-06-11\",\"2023-06-12\",\"2023-06-13\",\"2023-06-14\",\"2023-06-15\",\"2023-06-16\",\"2023-06-17\",\"2023-06-18\",\"2023-06-19\",\"2023-06-20\",\"2023-06-21\",\"2023-06-22\",\"2023-06-23\",\"2023-06-24\",\"2023-06-25\",\"2023-06-26\",\"2023-06-27\",\"2023-06-28\",\"2023-06-29\",\"2023-06-30\",\"2023-07-01\",\"2023-07-02\",\"2023-07-03\",\"2023-07-04\",\"2023-07-05\",\"2023-07-06\",\"2023-07-07\",\"2023-07-08\",\"2023-07-09\",\"2023-07-10\",\"2023-07-11\",\"2023-07-12\",\"2023-07-13\",\"2023-07-14\",\"2023-07-15\",\"2023-07-16\",\"2023-07-17\",\"2023-07-18\",\"2023-07-19\",\"2023-07-20\",\"2023-07-21\",\"2023-07-22\",\"2023-07-23\",\"2023-07-24\",\"2023-07-25\",\"2023-07-26\",\"2023-07-27\",\"2023-07-28\",\"2023-07-29\",\"2023-07-30\",\"2023-07-31\",\"2023-08-01\",\"2023-08-02\",\"2023-08-03\",\"2023-08-04\",\"2023-08-05\",\"2023-08-06\",\"2023-08-07\",\"2023-08-08\",\"2023-08-09\",\"2023-08-10\",\"2023-08-11\",\"2023-08-12\",\"2023-08-13\",\"2023-08-14\",\"2023-08-15\",\"2023-08-16\",\"2023-08-17\",\"2023-08-18\",\"2023-08-19\",\"2023-08-20\",\"2023-08-21\",\"2023-08-22\",\"2023-08-23\",\"2023-08-24\",\"2023-08-25\",\"2023-08-26\",\"2023-08-27\",\"2023-08-28\",\"2023-08-29\",\"2023-08-30\",\"2023-08-31\",\"2023-09-01\",\"2023-09-02\",\"2023-09-03\",\"2023-09-04\",\"2023-09-05\",\"2023-09-06\",\"2023-09-07\",\"2023-09-08\",\"2023-09-09\",\"2023-09-10\",\"2023-09-11\",\"2023-09-12\",\"2023-09-13\",\"2023-09-14\",\"2023-09-15\",\"2023-09-16\",\"2023-09-17\",\"2023-09-18\",\"2023-09-19\",\"2023-09-20\",\"2023-09-21\",\"2023-09-22\",\"2023-09-23\",\"2023-09-24\",\"2023-09-25\",\"2023-09-26\",\"2023-09-27\",\"2023-09-28\",\"2023-09-29\",\"2023-09-30\",\"2023-10-01\",\"2023-10-02\",\"2023-10-03\",\"2023-10-04\",\"2023-10-05\",\"2023-10-06\",\"2023-10-07\",\"2023-10-08\",\"2023-10-09\",\"2023-10-10\",\"2023-10-11\",\"2023-10-12\",\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-01\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-06\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-17\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\"],\"y\":[14,12,11,9,10,8,7,12,8,11,12,8,7,7,5,10,6,9,4,14,7,11,8,7,8,14,9,6,5,10,9,5,11,7,9,12,7,7,10,8,10,10,6,9,16,10,7,10,9,11,11,7,13,20,9,8,10,10,11,8,7,9,13,8,7,6,8,11,6,9,10,13,10,10,7,7,10,12,7,10,18,14,14,5,14,9,9,8,9,11,7,7,10,6,10,8,16,6,11,7,9,9,11,9,16,8,5,14,10,9,13,13,11,9,4,9,10,9,5,8,10,13,7,11,6,7,7,6,10,6,11,6,7,11,15,6,8,16,4,10,11,9,6,11,10,12,8,11,7,12,10,8,17,6,11,12,15,4,8,12,9,11,13,11,7,14,11,10,10,15,14,6,7,17,6,13,6,16,13,11,12,13,10,9,17,14,11,10,14,16,9,9,11,12,15,10,7,15,5,6,10,10,11,13,7,11,10,6,7,9,11,19,9,5,8,9,7,10,13,3,7,11,8,6,6,9,10,10,5,3,12,7,8,6,10,17,8,6,12,7,7,9,7,14,10,8,7,11,15,12,11,10,14,12,13,11,3,10,15,12,6,10,8,6,7,7,14,14,13,7,7,8,8,5,9,13,5,13,9,1,7,13,14,12,8,3,11,4,6,6,11,10,5,7,7,11,13,13,8,12,12,10,6,5,8,8,10,6,9,4,12,6,9,6,5,2,4,4,7,7,7,4,5,11,6,9,4,8,5,6,9,10,12,10,8,10,4,9,5,6,8,4,8,11,7,14,11,14,4,6,5,8,6,11,3,9,5,5,4,4,8,7,10,7,6],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"KLEBSIELLA PNEUMONIAE\",\"line\":{\"color\":\"blue\",\"dash\":\"solid\",\"width\":1},\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-01-01\",\"2023-01-02\",\"2023-01-03\",\"2023-01-04\",\"2023-01-05\",\"2023-01-06\",\"2023-01-07\",\"2023-01-08\",\"2023-01-09\",\"2023-01-10\",\"2023-01-11\",\"2023-01-12\",\"2023-01-13\",\"2023-01-14\",\"2023-01-15\",\"2023-01-16\",\"2023-01-17\",\"2023-01-18\",\"2023-01-19\",\"2023-01-20\",\"2023-01-21\",\"2023-01-22\",\"2023-01-23\",\"2023-01-24\",\"2023-01-25\",\"2023-01-26\",\"2023-01-27\",\"2023-01-28\",\"2023-01-29\",\"2023-01-30\",\"2023-01-31\",\"2023-02-01\",\"2023-02-02\",\"2023-02-03\",\"2023-02-04\",\"2023-02-05\",\"2023-02-06\",\"2023-02-07\",\"2023-02-08\",\"2023-02-09\",\"2023-02-10\",\"2023-02-11\",\"2023-02-12\",\"2023-02-13\",\"2023-02-14\",\"2023-02-15\",\"2023-02-16\",\"2023-02-17\",\"2023-02-18\",\"2023-02-19\",\"2023-02-20\",\"2023-02-21\",\"2023-02-22\",\"2023-02-23\",\"2023-02-24\",\"2023-02-25\",\"2023-02-26\",\"2023-02-27\",\"2023-02-28\",\"2023-03-01\",\"2023-03-02\",\"2023-03-03\",\"2023-03-04\",\"2023-03-05\",\"2023-03-06\",\"2023-03-07\",\"2023-03-08\",\"2023-03-09\",\"2023-03-10\",\"2023-03-11\",\"2023-03-12\",\"2023-03-13\",\"2023-03-14\",\"2023-03-15\",\"2023-03-16\",\"2023-03-17\",\"2023-03-18\",\"2023-03-19\",\"2023-03-20\",\"2023-03-21\",\"2023-03-22\",\"2023-03-23\",\"2023-03-24\",\"2023-03-25\",\"2023-03-26\",\"2023-03-27\",\"2023-03-28\",\"2023-03-29\",\"2023-03-30\",\"2023-03-31\",\"2023-04-01\",\"2023-04-02\",\"2023-04-03\",\"2023-04-04\",\"2023-04-05\",\"2023-04-06\",\"2023-04-07\",\"2023-04-08\",\"2023-04-09\",\"2023-04-10\",\"2023-04-11\",\"2023-04-12\",\"2023-04-13\",\"2023-04-14\",\"2023-04-15\",\"2023-04-16\",\"2023-04-17\",\"2023-04-18\",\"2023-04-19\",\"2023-04-20\",\"2023-04-21\",\"2023-04-22\",\"2023-04-23\",\"2023-04-24\",\"2023-04-25\",\"2023-04-26\",\"2023-04-27\",\"2023-04-28\",\"2023-04-29\",\"2023-04-30\",\"2023-05-01\",\"2023-05-02\",\"2023-05-03\",\"2023-05-04\",\"2023-05-05\",\"2023-05-06\",\"2023-05-07\",\"2023-05-08\",\"2023-05-09\",\"2023-05-10\",\"2023-05-11\",\"2023-05-12\",\"2023-05-13\",\"2023-05-14\",\"2023-05-15\",\"2023-05-16\",\"2023-05-17\",\"2023-05-18\",\"2023-05-19\",\"2023-05-20\",\"2023-05-21\",\"2023-05-22\",\"2023-05-23\",\"2023-05-24\",\"2023-05-25\",\"2023-05-26\",\"2023-05-27\",\"2023-05-28\",\"2023-05-29\",\"2023-05-30\",\"2023-05-31\",\"2023-06-01\",\"2023-06-02\",\"2023-06-03\",\"2023-06-04\",\"2023-06-05\",\"2023-06-06\",\"2023-06-07\",\"2023-06-08\",\"2023-06-09\",\"2023-06-10\",\"2023-06-11\",\"2023-06-12\",\"2023-06-13\",\"2023-06-14\",\"2023-06-15\",\"2023-06-16\",\"2023-06-17\",\"2023-06-18\",\"2023-06-19\",\"2023-06-20\",\"2023-06-21\",\"2023-06-22\",\"2023-06-23\",\"2023-06-24\",\"2023-06-25\",\"2023-06-26\",\"2023-06-27\",\"2023-06-28\",\"2023-06-29\",\"2023-06-30\",\"2023-07-01\",\"2023-07-02\",\"2023-07-03\",\"2023-07-04\",\"2023-07-05\",\"2023-07-06\",\"2023-07-07\",\"2023-07-08\",\"2023-07-09\",\"2023-07-10\",\"2023-07-11\",\"2023-07-12\",\"2023-07-13\",\"2023-07-14\",\"2023-07-15\",\"2023-07-16\",\"2023-07-17\",\"2023-07-18\",\"2023-07-19\",\"2023-07-20\",\"2023-07-21\",\"2023-07-22\",\"2023-07-23\",\"2023-07-24\",\"2023-07-25\",\"2023-07-26\",\"2023-07-27\",\"2023-07-28\",\"2023-07-29\",\"2023-07-30\",\"2023-07-31\",\"2023-08-01\",\"2023-08-02\",\"2023-08-03\",\"2023-08-04\",\"2023-08-05\",\"2023-08-06\",\"2023-08-07\",\"2023-08-08\",\"2023-08-09\",\"2023-08-10\",\"2023-08-11\",\"2023-08-12\",\"2023-08-13\",\"2023-08-14\",\"2023-08-15\",\"2023-08-16\",\"2023-08-17\",\"2023-08-18\",\"2023-08-19\",\"2023-08-20\",\"2023-08-21\",\"2023-08-22\",\"2023-08-23\",\"2023-08-24\",\"2023-08-25\",\"2023-08-26\",\"2023-08-27\",\"2023-08-28\",\"2023-08-29\",\"2023-08-30\",\"2023-08-31\",\"2023-09-01\",\"2023-09-02\",\"2023-09-03\",\"2023-09-04\",\"2023-09-05\",\"2023-09-06\",\"2023-09-07\",\"2023-09-08\",\"2023-09-09\",\"2023-09-10\",\"2023-09-11\",\"2023-09-12\",\"2023-09-13\",\"2023-09-14\",\"2023-09-15\",\"2023-09-16\",\"2023-09-17\",\"2023-09-18\",\"2023-09-19\",\"2023-09-20\",\"2023-09-21\",\"2023-09-22\",\"2023-09-23\",\"2023-09-24\",\"2023-09-25\",\"2023-09-26\",\"2023-09-27\",\"2023-09-28\",\"2023-09-29\",\"2023-09-30\",\"2023-10-01\",\"2023-10-02\",\"2023-10-03\",\"2023-10-04\",\"2023-10-05\",\"2023-10-06\",\"2023-10-07\",\"2023-10-08\",\"2023-10-09\",\"2023-10-10\",\"2023-10-11\",\"2023-10-12\",\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\"],\"y\":[4,10,3,5,7,5,4,3,8,6,3,3,3,5,3,6,6,6,5,6,2,4,5,8,11,6,6,3,1,14,3,6,8,7,6,5,2,3,5,2,4,6,5,4,5,3,4,4,7,2,8,6,3,6,5,4,5,5,2,8,3,10,8,8,4,7,4,5,2,5,6,5,4,6,9,5,6,4,1,2,5,9,5,3,5,5,9,9,7,1,8,7,5,5,1,3,3,10,7,6,1,5,2,9,6,2,2,11,8,9,5,7,4,4,3,11,3,5,2,7,4,9,4,4,3,5,9,7,7,5,3,7,5,4,5,6,4,6,3,5,8,4,5,3,7,4,3,3,9,6,6,4,7,7,7,6,3,4,7,2,4,3,7,4,2,5,7,3,1,5,5,9,7,5,5,9,5,5,5,7,12,5,8,5,3,3,5,11,8,4,5,8,4,4,11,5,5,5,13,6,6,5,9,9,4,4,3,4,6,7,7,6,4,8,5,5,6,5,1,2,2,1,1,3,4,8,3,3,5,3,7,9,3,4,4,7,4,3,3,5,8,2,2,4,7,5,4,6,2,4,4,1,1,2,4,7,3,3,2,5,8,8,3,7,5,4,5,4,3,6,4,5,3,3,2,7,4,1,3,7,2,1,4,8,7,7,4,8,3,4,6,2,5,6,4,4,8,3,4,4,10,2,2,2,4,2,3,3,1,5,3,5,10,4,4,7,3,3,7,3,4,1,5,1,3,4,3,6,4,5,2,1,4,3,5,3,6,6,2,3,6,2,6,2,1,2,3,5,5,4,2,5,3,3,5,1,3,4,5,2,6,4],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"PSEUDOMONAS AERUGINOSA\",\"line\":{\"color\":\"green\",\"dash\":\"dot\",\"width\":1},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2023-01-01\",\"2023-01-02\",\"2023-01-03\",\"2023-01-04\",\"2023-01-05\",\"2023-01-06\",\"2023-01-07\",\"2023-01-08\",\"2023-01-09\",\"2023-01-10\",\"2023-01-11\",\"2023-01-12\",\"2023-01-13\",\"2023-01-14\",\"2023-01-15\",\"2023-01-16\",\"2023-01-17\",\"2023-01-18\",\"2023-01-19\",\"2023-01-20\",\"2023-01-21\",\"2023-01-22\",\"2023-01-23\",\"2023-01-24\",\"2023-01-25\",\"2023-01-26\",\"2023-01-27\",\"2023-01-28\",\"2023-01-29\",\"2023-01-30\",\"2023-01-31\",\"2023-02-01\",\"2023-02-02\",\"2023-02-03\",\"2023-02-04\",\"2023-02-05\",\"2023-02-06\",\"2023-02-07\",\"2023-02-08\",\"2023-02-09\",\"2023-02-10\",\"2023-02-11\",\"2023-02-12\",\"2023-02-13\",\"2023-02-14\",\"2023-02-15\",\"2023-02-16\",\"2023-02-17\",\"2023-02-18\",\"2023-02-19\",\"2023-02-20\",\"2023-02-21\",\"2023-02-22\",\"2023-02-23\",\"2023-02-24\",\"2023-02-25\",\"2023-02-26\",\"2023-02-27\",\"2023-02-28\",\"2023-03-01\",\"2023-03-02\",\"2023-03-03\",\"2023-03-04\",\"2023-03-05\",\"2023-03-06\",\"2023-03-07\",\"2023-03-08\",\"2023-03-09\",\"2023-03-10\",\"2023-03-11\",\"2023-03-12\",\"2023-03-13\",\"2023-03-14\",\"2023-03-15\",\"2023-03-16\",\"2023-03-17\",\"2023-03-18\",\"2023-03-19\",\"2023-03-20\",\"2023-03-21\",\"2023-03-22\",\"2023-03-23\",\"2023-03-24\",\"2023-03-25\",\"2023-03-26\",\"2023-03-27\",\"2023-03-28\",\"2023-03-29\",\"2023-03-30\",\"2023-03-31\",\"2023-04-01\",\"2023-04-02\",\"2023-04-03\",\"2023-04-04\",\"2023-04-05\",\"2023-04-06\",\"2023-04-07\",\"2023-04-08\",\"2023-04-09\",\"2023-04-10\",\"2023-04-11\",\"2023-04-12\",\"2023-04-13\",\"2023-04-14\",\"2023-04-15\",\"2023-04-16\",\"2023-04-17\",\"2023-04-18\",\"2023-04-19\",\"2023-04-20\",\"2023-04-21\",\"2023-04-22\",\"2023-04-23\",\"2023-04-24\",\"2023-04-25\",\"2023-04-26\",\"2023-04-27\",\"2023-04-28\",\"2023-04-29\",\"2023-04-30\",\"2023-05-01\",\"2023-05-02\",\"2023-05-03\",\"2023-05-04\",\"2023-05-05\",\"2023-05-06\",\"2023-05-07\",\"2023-05-08\",\"2023-05-09\",\"2023-05-10\",\"2023-05-11\",\"2023-05-12\",\"2023-05-13\",\"2023-05-14\",\"2023-05-15\",\"2023-05-16\",\"2023-05-17\",\"2023-05-18\",\"2023-05-19\",\"2023-05-20\",\"2023-05-21\",\"2023-05-22\",\"2023-05-23\",\"2023-05-24\",\"2023-05-25\",\"2023-05-26\",\"2023-05-27\",\"2023-05-28\",\"2023-05-29\",\"2023-05-30\",\"2023-05-31\",\"2023-06-01\",\"2023-06-02\",\"2023-06-03\",\"2023-06-04\",\"2023-06-05\",\"2023-06-06\",\"2023-06-07\",\"2023-06-08\",\"2023-06-09\",\"2023-06-10\",\"2023-06-11\",\"2023-06-12\",\"2023-06-13\",\"2023-06-14\",\"2023-06-15\",\"2023-06-16\",\"2023-06-17\",\"2023-06-18\",\"2023-06-19\",\"2023-06-20\",\"2023-06-21\",\"2023-06-22\",\"2023-06-23\",\"2023-06-24\",\"2023-06-25\",\"2023-06-26\",\"2023-06-27\",\"2023-06-28\",\"2023-06-29\",\"2023-06-30\",\"2023-07-01\",\"2023-07-02\",\"2023-07-03\",\"2023-07-04\",\"2023-07-05\",\"2023-07-06\",\"2023-07-07\",\"2023-07-08\",\"2023-07-09\",\"2023-07-10\",\"2023-07-11\",\"2023-07-12\",\"2023-07-13\",\"2023-07-14\",\"2023-07-15\",\"2023-07-16\",\"2023-07-17\",\"2023-07-18\",\"2023-07-19\",\"2023-07-20\",\"2023-07-21\",\"2023-07-22\",\"2023-07-23\",\"2023-07-24\",\"2023-07-25\",\"2023-07-26\",\"2023-07-27\",\"2023-07-28\",\"2023-07-29\",\"2023-07-30\",\"2023-07-31\",\"2023-08-01\",\"2023-08-02\",\"2023-08-03\",\"2023-08-04\",\"2023-08-05\",\"2023-08-06\",\"2023-08-07\",\"2023-08-08\",\"2023-08-09\",\"2023-08-10\",\"2023-08-11\",\"2023-08-12\",\"2023-08-13\",\"2023-08-14\",\"2023-08-15\",\"2023-08-16\",\"2023-08-17\",\"2023-08-18\",\"2023-08-19\",\"2023-08-20\",\"2023-08-21\",\"2023-08-22\",\"2023-08-23\",\"2023-08-24\",\"2023-08-25\",\"2023-08-26\",\"2023-08-27\",\"2023-08-28\",\"2023-08-29\",\"2023-08-30\",\"2023-08-31\",\"2023-09-01\",\"2023-09-02\",\"2023-09-03\",\"2023-09-04\",\"2023-09-05\",\"2023-09-06\",\"2023-09-07\",\"2023-09-08\",\"2023-09-09\",\"2023-09-10\",\"2023-09-11\",\"2023-09-12\",\"2023-09-13\",\"2023-09-14\",\"2023-09-15\",\"2023-09-16\",\"2023-09-17\",\"2023-09-18\",\"2023-09-19\",\"2023-09-20\",\"2023-09-21\",\"2023-09-22\",\"2023-09-23\",\"2023-09-24\",\"2023-09-25\",\"2023-09-26\",\"2023-09-27\",\"2023-09-28\",\"2023-09-29\",\"2023-09-30\",\"2023-10-01\",\"2023-10-02\",\"2023-10-03\",\"2023-10-04\",\"2023-10-05\",\"2023-10-06\",\"2023-10-07\",\"2023-10-08\",\"2023-10-09\",\"2023-10-10\",\"2023-10-11\",\"2023-10-12\",\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-01\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-06\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-17\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\"],\"y\":[14,6,9,14,9,8,10,18,8,8,8,3,7,6,12,7,11,4,11,16,18,7,13,12,13,16,17,15,13,15,7,14,8,21,7,8,16,5,10,8,10,16,13,12,9,15,11,15,12,15,12,8,9,10,14,13,13,8,12,15,9,17,11,17,14,6,10,19,6,21,9,18,7,12,13,13,15,17,17,11,13,21,15,12,10,16,15,9,12,11,12,16,14,8,18,19,7,11,16,3,5,10,14,15,10,5,12,16,21,13,15,12,10,9,17,14,6,10,16,15,15,16,14,9,7,10,15,10,16,12,9,13,16,12,19,8,11,14,13,10,16,7,10,17,10,19,13,13,7,7,10,10,13,10,11,12,13,10,11,12,12,15,13,16,8,10,9,10,13,8,13,12,9,17,13,12,9,12,14,17,8,12,8,9,7,12,12,15,19,14,13,15,9,11,16,13,14,19,12,17,15,10,11,14,8,7,12,17,6,14,13,3,12,13,16,14,10,8,13,10,15,14,11,14,9,13,8,6,17,9,10,7,8,13,17,8,10,15,11,12,11,15,10,9,15,14,14,9,11,4,6,10,12,10,10,15,2,3,15,9,18,10,7,12,9,9,7,14,9,5,3,16,10,3,10,12,4,5,4,6,12,8,9,13,7,12,9,13,5,11,6,9,9,10,8,7,10,9,10,8,6,8,9,8,9,13,8,10,6,9,4,14,13,6,13,8,8,6,7,9,2,5,2,5,4,3,12,10,3,4,13,8,8,7,7,6,13,10,8,10,10,16,9,3,3,10,8,5,10,10,7,5,9,9,2,9,8,3,5,8,4,7,4,6,4],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"STAPHYLOCOCCUS AUREUS\",\"line\":{\"color\":\"orange\",\"dash\":\"dash\",\"width\":1},\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/llm_interpret.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"function interprets given data frame ggplot visualisation sending language model API via ellmer package. supports multiple LLM providers, allowing users specify desired provider model environment variables.","code":""},{"path":"/reference/llm_interpret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"","code":"llm_interpret(input, word_limit = 100, prompt_extension = NULL)"},{"path":"/reference/llm_interpret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"input input object, either data frame ggplot object, representing data visualisation interpreted. word_limit Integer. desired word length response. Defaults 100. prompt_extension Character. Optional additional instructions extend standard prompt. Defaults NULL.","code":""},{"path":"/reference/llm_interpret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"character string containing narrative interpretation input object generated LLM.","code":""},{"path":"/reference/llm_interpret.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"Supported LLM Providers Models: OpenAI: Utilises OpenAI's models via chat_openai(). Requires setting OPENAI_API_KEY environment variable. Applicable models include: \"gpt-4.1-nano\" Google Gemini: Utilises Google's Gemini models via chat_gemini(). Requires setting GOOGLE_API_KEY environment variable. Applicable models include: \"gemini-2.5-flash-lite\" Anthropic Claude: Utilises Anthropic's Claude models via chat_anthropic(). Requires setting CLAUDE_API_KEY environment variable. Applicable models include: \"claude-sonnet-4-20250514\" Environment Variables: LLM_PROVIDER: Specifies LLM provider (\"openai\", \"gemini\", \"anthropic\"). LLM_API_KEY: API key corresponding chosen provider. LLM_MODEL: model identifier use. Note: Ensure appropriate environment variables set invoking function. function throw error specified provider unsupported required environment variables missing.","code":""},{"path":"/reference/llm_interpret.html","id":"tested-models","dir":"Reference","previous_headings":"","what":"Tested Models","title":"Interpret Epidemiological Data or Visualisations using LLMs — llm_interpret","text":"October 2025, function tested verified work following models: OpenAI: gpt-4.1-nano Anthropic: claude-sonnet-4-20250514 Google Gemini: gemini-2.5-flash-lite Additional models may tested future. Users can provide custom instructions prompt_extension parameter specialised analysis requirements.","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"data contains digital vector boundaries Local Authority Districts, London, United Kingdom, May 2023. boundaries generalised (20m) - clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"","code":"London_LA_boundaries_2023"},{"path":"/reference/London_LA_boundaries_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"dataset variables: FID  LAD23CD Local Authority District code 2023 LAD23NM Local Authority District name 2023 LAD23NMW Local Authority District name 2023 - Welsh BNG_E  BNG_N  LONG  LAT  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/London_LA_boundaries_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Local Authority Districts (May 2023) Boundaries for London BGC — London_LA_boundaries_2023","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2023 Data subset following, including Local Authority Districts Inner London Outer London. https://geoportal.statistics.gov.uk/datasets/ons::local-authority-districts-may-2023-boundaries-uk-bgc/explore","code":""},{"path":"/reference/PHEC_boundaries_2016.html","id":null,"dir":"Reference","previous_headings":"","what":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"data contains digital vector boundaries Public Health England Centres England December 2016. boundaries generalised (20m) - clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/PHEC_boundaries_2016.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"","code":"PHEC_boundaries_2016"},{"path":"/reference/PHEC_boundaries_2016.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"dataset variables: OBJECTID  phec16cd Public Health England Centre code phec16nm Public Health England Centre name bng_e  bng_n  long  lat  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/PHEC_boundaries_2016.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PHEC (Dec 2016) Generalised Clipped Boundaries in England — PHEC_boundaries_2016","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2022 https://open-geography-portalx-ons.hub.arcgis.com/datasets/ons::phec-dec-2016-generalised-clipped-boundaries--england/explore","code":""},{"path":"/reference/point_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"point_chart — point_chart","title":"point_chart — point_chart","text":"function producing either static (ggplot) dynamic (plotly) point charts.","code":""},{"path":"/reference/point_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"point_chart — point_chart","text":"","code":"point_chart(   dynamic = FALSE,   base = NULL,   params = list(df = NULL, x = NULL, y = NULL, point_shape = \"triangle\", point_size =     1.5, point_colours = \"blue\", point_labels = NULL, point_labels_size = 5,     point_labels_hjust = 0, point_labels_vjust = 0, point_labels_nudge_x = 0,     point_labels_nudge_y = 0, group_var = NULL, ci = NULL, ci_upper = NULL, ci_lower =     NULL, ci_legend = TRUE, ci_legend_title = \"Confidence interval\", ci_colours = \"red\",     errorbar_width = NULL, y_sec_axis = FALSE, y_sec_axis_no_shift = TRUE,     y_sec_axis_percent_full = FALSE, chart_title = NULL,       chart_title_size = 13,     chart_title_colour = \"black\", chart_footer = NULL, chart_footer_size = 12,     chart_footer_colour = \"black\", x_axis_title = NULL, y_axis_title = NULL,     x_axis_title_font_size = 11, y_axis_title_font_size = 11, x_axis_label_angle = NULL,     y_axis_label_angle = NULL, x_axis_label_font_size = 9, y_axis_label_font_size = 9,     x_axis_reverse = FALSE, y_percent = FALSE, x_limit_min = NULL, x_limit_max = NULL,     y_limit_min = NULL, y_limit_max = NULL, x_axis_break_labels = NULL,     y_axis_break_labels = NULL,       x_axis_n_breaks = NULL, y_axis_n_breaks = NULL,     x_axis_date_breaks = NULL, st_theme = NULL, show_gridlines = TRUE, show_axislines =     TRUE, legend_title = \"\", legend_pos = \"right\", legend_font_size = 8,     legend_title_font_size = 8, point_size_legend = FALSE, point_size_legend_title = \"\",     hline = NULL, hline_colour = \"black\", hline_width = 0.5, hline_type = \"dashed\",     hline_label = NULL, hline_label_colour = \"black\") )"},{"path":"/reference/point_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"point_chart — point_chart","text":"dynamic Logical indicating whether produce dynamic (plotly) output. Default FALSE, return static ggplot output. base base ggplot plotly object output applied . dynamic = TRUE base must plotly object, dynamic = FALSE base must ggplot object. params named list containing arguements used create plot. ' df data frame containing values used create point chart. x Name variable df used populate x-axis. y Name variable df used populate y-axis. point_shape Shape plotted points. Permitted values c('circle',    'triangle','square','plus','square cross','asterisk','diamond'). group_var provided, point shapes automatically assigned based group. point_size Size plotted point symbols. supplied number, points plotted size. supplied name numeric variable within df, size point relative value numeric variable manner bubble chart. point_colours Colour points plotted (default = \"blue\"). group_var provided, point_colours can set character vector define colours group. point_labels Name variable df containing text labels plot point chart. provided labels applied. dynamic    = TRUE point_labels applied hover-labels, point_labels accept html format output labels. point_labels_size Font size point_labels output chart dynamic = FALSE. point_labels_hjust Horizontal justification point_labels output chart dynamic = FALSE. Permitted values = c(0, 0.5, 1) left, centre, right justified respectively. point_labels_vjust Vertical justification point_labels output chart dynamic = FALSE. Permitted values = c(0, 0.5, 1) bottom, middle, top justified respectively. point_labels_nudge_x Horizontal adjustment nudge point_labels dynamic = FALSE. Useful offsetting text points. point_labels_nudge_y Vertical adjustment nudge point_labels dynamic = FALSE. Useful offsetting text points. group_var Name variable df used define separate groups points chart. ci Confidence interval. ci = \"errorbar\" confidence intervals plotted point errorbars, ci = \"ribbon\" confidence intervals added chart ribbon plot group. ci provided, ci_upper ci_lower must also provided. ci_upper Name variable df used upper confidence limit point. Mandatory ci provided. ci_lower Name variable df used lower confidence limit point. Mandatory ci provided. ci_legend Logical indicating whether separate legend included chart confidence interval parameters. applies group_var provided. Defaults FALSE. ci_legend_title Text use title separate legend ci_legend = TRUE. ci_colours Colour(s) used plotting confidence intervals. ci =    \"errorbar\" determine colour plotted errorbars, ci =    \"ribbon\" determine colour plotted ribbons. errorbar_width Horizontal width plotted error bars ci =    \"errorbar\". y_sec_axis Logical indicate whether data plotted secondary (right) y-axis. Default = FALSE. y_sec_axis_no_shift Forces secondary y-axis scale begin 0. Default = TRUE. y_sec_axis_percent_full Forces secondary y-axis scale range 0-100% y_percent = TRUE chart_title Text use chart title. chart_title_size Font size chart title. chart_title_colour Font colour chart title. chart_footer Text use chart footer. chart_footer_size Font size chart footer. chart_footer_colour Font colour chart footer. x_axis_title Text used x-axis title. Defaults name x-variable stated. y_axis_title Text used y-axis title. Defaults name y-variable stated. x_axis_title_font_size Font size x-axis title. y_axis_title_font_size Font size y-axis title. x_axis_label_angle Angle x-axis label text. y_axis_label_angle Angle y-axis label text. x_axis_label_font_size Font size x-axis tick labels. y_axis_label_font_size Font size y-axis tick labels. x_axis_reverse Reverses x-axis scale x_axis_reverse = TRUE. y_percent Converts y-axis percentage scale y_percent = TRUE. x_limit_min Lower limit x-axis. Default used provided. x_limit_max Upper limit x-axis. Default used provided. y_limit_min Lower limit y-axis. Default used provided. y_limit_max Upper limit y-axis. Default used provided. x_axis_break_labels Vector values use x-axis breaks. Defaults used provided. y_axis_break_labels Vector values use y-axis breaks. Defaults used provided. x_axis_n_breaks Scales x-axis approximately n breaks. provided x_axis_break_labels also provided. y_axis_n_breaks Scales y-axis approximately n breaks. used y_axis_break_labels also provided. x_axis_date_breaks string giving distance breaks like \"2 weeks\", \"10 years\". Valid specifications 'sec', 'min', 'hour', 'day', 'week', 'month' 'year', optionally followed 's'. Matches ggplot scale_date() conventions (see https://ggplot2.tidyverse.org/reference/scale_date.html). used y_axis_break_labels also provided. st_theme Name ggplot theme applied static plot. Can provided dynamic = FALSE show_gridlines Logical show chart gridlines. Default = TRUE. show_axislines Logical show chart axis lines. Default = TRUE. legend_title Text used legend title. legend_pos Position legend. Permitted values = c(\"top\",\"bootom\",\"right\",\"left\") legend_font_size Font size used legend. legend_title_font_size Font size used legend title. point_size_legend Include legend point_size. Default = FALSE point_size_legend_title Text used point legend title. hline Adds horizontal line across chart corresponding y-value. Multiple values may provided vector add multiple horizontal lines. hline_colour Colour horizontal lines hline provided. vector colours can provided colour individual hlines multiple hlines provided. hline_width Numerical width horizontal lines hline provided. vector numerical widths can provided individual hlines multiple hlines provided. hline_type Line style horizontal lines hline provided. vector line styles can provided style hlines multiple hlines provided. Permitted values = c(\"solid\", \"dotted\", \"dashed\", \"longdash\", \"dotdash\"). hline_label Text label horizontal lines hline provided. vector text strings can provided label individual hlines multiple hlines provided. hline_label_colour Colour horizontal line labels hline_labels provided. vector colours can provided colour individual hline_labels multiple hline_labels provided.","code":""},{"path":"/reference/point_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"point_chart — point_chart","text":"ggplot plotly object.","code":""},{"path":"/reference/point_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"point_chart — point_chart","text":"","code":"if (FALSE) { # \\dontrun{    # Example 1: Basic point chart.  # Define a dataframe containing the number of detections per month from the # epiviz::lab_data dataset. library(epiviz)  detections_per_month <- epiviz::lab_data |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n()) |>   ungroup()  # Create static point chart of detections per month from 2022 to 2023. chart_detections_per_month <- point_chart(   params = list(     df = detections_per_month,     x = \"specimen_month\",     y = \"detections\",     point_colours = \"#007C91\",     point_size = 3,     x_limit_min = \"2022-01-01\",     x_limit_max = \"2023-12-31\",     chart_title = \"Detections per Month 2022-2023\",     x_axis_title = \"Month of detection\",     y_axis_title = \"Number of detections\",     x_axis_date_breaks = \"2 months\"   ) )  chart_detections_per_month    # Example 2: Point chart with error bars and threshold line. library(epiviz)  # Add random error limits to detections_per_month dataframe detections_per_month <- detections_per_month |>   rowwise() |>   mutate(lower_limit = detections - sample(10:50,1),          upper_limit = detections + sample(10:50,1)) |>   ungroup()  # Define parameters list outside of point_chart() function. detections_params <- list(   df = detections_per_month,   x = \"specimen_month\",   y = \"detections\",   point_colours = \"#007C91\",   point_size = 3,   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Number of detections\",   x_axis_date_breaks = \"2 months\",   y_axis_break_labels = seq(0, 900, 100),   ci = \"errorbar\",   ci_lower = \"lower_limit\",   ci_upper = \"upper_limit\",   error_colours = \"red\",   hline = 800,   hline_colour = \"orange\",   hline_label = \"threshold\",   hline_label_colour = \"orange\" )  # Create static point chart static_chart <- point_chart(params = detections_params, dynamic = FALSE)  # Create the same chart as a dynamic chart dynamic_chart <- point_chart(params = detections_params, dynamic = TRUE)  # View both simultaneously using shiny app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)     # Example 3: Point chart with grouped data and confidence ribbon. library(epiviz)  # Define a dataframe containing the number of detections per month by species # from the epiviz::lab_data dataset, and add random error limits. species_by_month <- lab_data |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month'),            organism_species_name) |>   summarise(detections = n()) |>   ungroup() |>   rowwise() |>   mutate(lower_limit = detections - sample(10:50,1),          upper_limit = detections + sample(10:50,1)) |>   ungroup()  # Define parameters list for point_chart() function. #   -Include multiple threshold lines species_params <- list(   df = species_by_month,   x = \"specimen_month\",   y = \"detections\",   group_var = \"organism_species_name\",   point_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   point_size = 3,   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Number of detections\",   x_axis_date_breaks = \"2 months\",   y_axis_break_labels = seq(0, 600, 100),   x_axis_label_angle = 45,   ci = \"ribbon\",   ci_lower = \"lower_limit\",   ci_upper = \"upper_limit\",   ci_colours = c(\"#007C91\",\"#8A1B61\",\"#FF7F32\"),   hline = c(450,550),   hline_colour = c(\"blue\",\"red\"),   hline_label = c(\"threshold 1\", \"threshold 2\"),   hline_label_colour = c(\"blue\",\"red\") )   # Create static and dynamic charts static_chart <- point_chart(params = species_params, dynamic = FALSE) dynamic_chart <- point_chart(params = species_params, dynamic = TRUE)  # View using app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)     # Example 4: Point chart as bubble chart library(epiviz)  # Create dataframe of number of detections of each species by region london_detections <- epiviz::lab_data |>   mutate(london_det = ifelse(region == \"London\", 1, 0)) |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n(),             detections_london = sum(london_det)) |>   ungroup() |>   mutate(proportion_london = detections_london/detections,          percent_london = percent(proportion_london, accuracy = 1),          hoverlabels = paste0(            '<b>',specimen_month,'<\/b>',            '<br>Detections: ',detections,            '<br>In London: ',detections_london,            '<br><i>% in London: ',percent_london,'<\/i>'          ))   # Define parameters list for point_chart() function. species_region_params <- list(   df = london_detections,   x = \"specimen_month\",   y = \"detections\",   point_size = \"detections_london\",   point_size_legend = TRUE,   point_size_legend_title = \"Number of \\ndetections in \\nLondon\",   point_shape = \"circle\",   point_colours = \"#8A1B61\",   chart_title = \"Detections by month \\n(with percentage in London)\",   x_axis_title = \"Detection Month\",   y_axis_title = \"Number of Detections\",   x_axis_label_angle = 45,   y_axis_break_labels = seq(300, 900, 100),   x_axis_date_breaks = \"6 months\" )  # Add point label parameters for static chart stat_label_parameters <- list(point_labels = \"percent_london\",                               point_labels_size = 2.5,                               point_labels_vjust = 1,                               point_labels_hjust = 0.5,                               point_labels_nudge_x = 5,                               point_labels_nudge_y = -15)  # Add hover label parameters for dynamic chart dyn_label_parameters <- list(point_labels = \"hoverlabels\")  # Create static and dynamic charts static_chart <- point_chart(params = c(species_region_params,stat_label_parameters),                             dynamic = FALSE)  dynamic_chart <- point_chart(params = c(species_region_params,dyn_label_parameters),                              dynamic = TRUE)  # View using app library(shiny) library(plotly) ui <- fluidPage(   plotOutput('static_chart'),   plotlyOutput('dynamic_chart') ) server <- function(input, output, session) {   output$static_chart <- renderPlot(static_chart)   output$dynamic_chart <- renderPlotly(dynamic_chart) } shinyApp(ui, server)    # Example 5: Point chart with additional overlayed chart on secondary y-axis library(epiviz)  # Use static chart from Example 1 as a base chart base_chart <- chart_detections_per_month  # Define data for overlaying chart # Percentage of overall detections in people over 65 years of age. library(lubridate) detections_over65 <- lab_data |>   mutate(age = year(as.period(lubridate::interval(date_of_birth,Sys.Date()))),          over65 = ifelse(age > 65, 1, 0)) |>   group_by(specimen_month = lubridate::floor_date(specimen_date, 'month')) |>   summarise(detections = n(),             detections_over65 = sum(over65)) |>   ungroup() |>   mutate(percent_over65 = detections_over65/detections)  # Define parameters list over65_params <- list(   df = detections_over65,   x = \"specimen_month\",   y = \"percent_over65\",   y_percent = TRUE,   y_sec_axis = TRUE,   y_sec_axis_percent_full = TRUE,   point_colours = \"purple\",   point_size = 3,   point_shape = \"asterisk\",   x_limit_min = \"2022-01-01\",   x_limit_max = \"2023-12-31\",   y_limit_max = 1000,   chart_title = \"Detections per Month 2022-2023\",   x_axis_title = \"Month of detection\",   y_axis_title = \"Percentage of detections in over 65s\",   x_axis_date_breaks = \"2 months\" )  # Create point chart over65_chart <- point_chart(base = base_chart,                             params = over65_params,                             dynamic = FALSE)   # Legends are not currently implemented for static charts with a supplied #  base chart, so add legend manually using dummy data and an invisible geom_point() over65_chart <- over65_chart +   geom_point(data = data.frame(x=as.Date(c(\"2020-01-01\",\"2020-01-02\")),                                y=c(1,1),                                label=c(\"Total Detections\",\"% of Detections in Over 65s\")),              aes(x=x, y=y, colour=label, shape=label)) +   scale_color_manual(name='', values=c(\"Total Detections\"=\"#007C91\",                                        \"% of Detections in Over 65s\"=\"purple\")) +   scale_shape_manual(name='', values=c(\"Total Detections\"=\"triangle\",                                        \"% of Detections in Over 65s\"=\"asterisk\")) +   theme(legend.position=\"top\")  over65_chart   } # }"},{"path":"/reference/UK_boundaries_2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"data contains digital vector boundaries  Countries, United Kingdom, December 2023. boundaries ultra generalised (500m) clipped coastline (Mean High Water mark). Contains Ordnance Survey ONS Intellectual Property Rights.","code":""},{"path":"/reference/UK_boundaries_2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"","code":"UK_boundaries_2023"},{"path":"/reference/UK_boundaries_2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"dataset variables: FID  CTRY23CD Country code 2023 CTRY23NM Country name 2023 CTRY23NMW Country name 2023 - Welsh BNG_E  BNG_N  LONG  LAT  GlobalID  SHAPE_Length  SHAPE_Area  geometry","code":""},{"path":"/reference/UK_boundaries_2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Countries (December 2023) Boundaries UK BUC — UK_boundaries_2023","text":"Source: Office National Statistics licensed Open Government Licence v.3.0 Contains OS data © Crown copyright database right 2023 https://geoportal.statistics.gov.uk/datasets/ons::countries-december-2023-boundaries-uk-buc/explore","code":""},{"path":"/news/index.html","id":"epiviz-0009001","dir":"Changelog","previous_headings":"","what":"epiviz 0.0.0.9001","title":"epiviz 0.0.0.9001","text":"Initial GitHub code transfer internal repo.","code":""},{"path":"/news/index.html","id":"epiviz-010","dir":"Changelog","previous_headings":"","what":"epiviz 0.1.0","title":"epiviz 0.1.0","text":"Initial version internal production apps","code":""},{"path":"/news/index.html","id":"epiviz-011","dir":"Changelog","previous_headings":"","what":"epiviz 0.1.1","title":"epiviz 0.1.1","text":"Initial CRAN submission","code":""}]
